from dataclasses import dataclass, field
from enum import Enum
from typing import List, Optional

from xsdata.models.datatype import XmlDateTime

__NAMESPACE__ = "http://ws.integration.pm.bsit.com.br/"


class AccumulationPositionEnum(Enum):
    NOT_CUMULATIVE = "NOT_CUMULATIVE"
    HEALTHCORE_PROFESSIONAL = "HEALTHCORE_PROFESSIONAL"
    TEACHER = "TEACHER"
    TECHNICAL_SCIENTIFIC = "TECHNICAL_SCIENTIFIC"


class AccumulationSphereColareEnum(Enum):
    FEDERAL = "FEDERAL"
    STATE = "STATE"
    MUNICIPAL = "MUNICIPAL"


class AdjustmentShapeColareEnum(Enum):
    PARITY = "PARITY"
    REAL_VALUE_PRESERVATION = "REAL_VALUE_PRESERVATION"


class AdmissionTypeColareEnum(Enum):
    EFFECTIVE_TENDER = "EFFECTIVE_TENDER"
    EFFECTIVE_ADMISSION_PRIOR_TO_05_10_83 = (
        "EFFECTIVE_ADMISSION_PRIOR_TO_05_10_83"
    )
    EFFECTIVE_ADMISSION_BETWEEN_05_10_83_05_10_88 = (
        "EFFECTIVE_ADMISSION_BETWEEN_05_10_83_05_10_88"
    )
    EFFECTIVE_ACS_ACE_PUBLIC_SELECTION_PROCESS_E_C_N_51_06 = (
        "EFFECTIVE_ACS_ACE_PUBLIC_SELECTION_PROCESS_E_C_N_51_06"
    )
    COMMISSIONED = "COMMISSIONED"
    POLITICAL_AGENT = "POLITICAL_AGENT"
    HONORARY_AGENT_MEMBER_OF_THE_BOARD = "HONORARY_AGENT_MEMBER_OF_THE_BOARD"
    HONORARY_AGENT_GUARDIAN_COUNSELOR = "HONORARY_AGENT_GUARDIAN_COUNSELOR"
    TEMPORARY = "TEMPORARY"
    TEMPORARY_NO_SELECTION_PROCESS = "TEMPORARY_NO_SELECTION_PROCESS"
    NO_CONTEST_WHICH_DOES_NOT_FIT_THE_PREVIOUS_CODES = (
        "NO_CONTEST_WHICH_DOES_NOT_FIT_THE_PREVIOUS_CODES"
    )
    EFFECTIVE_SERVER_CLT_ANOTHER_STATE_OF_GOIAS = (
        "EFFECTIVE_SERVER_CLT_ANOTHER_STATE_OF_GOIAS"
    )
    COMMISSIONED_SERVER_CLT_ANOTHER_STATE_OF_GOIAS = (
        "COMMISSIONED_SERVER_CLT_ANOTHER_STATE_OF_GOIAS"
    )
    TEMPORARY_SERVER_ANOTHER_STATE_OF_GOIAS = (
        "TEMPORARY_SERVER_ANOTHER_STATE_OF_GOIAS"
    )
    EFFECTIVE_SERVER_CLT_ANOTHER_ENTITY_OF_THE_FEDERATION = (
        "EFFECTIVE_SERVER_CLT_ANOTHER_ENTITY_OF_THE_FEDERATION"
    )
    COMMISSIONED_SERVER_ANOTHER_ENTITY_OF_THE_FEDERATION = (
        "COMMISSIONED_SERVER_ANOTHER_ENTITY_OF_THE_FEDERATION"
    )
    TEMPORARY_SERVER_ANOTHER_ENTITY_OF_THE_FEDERATION = (
        "TEMPORARY_SERVER_ANOTHER_ENTITY_OF_THE_FEDERATION"
    )


class AdmissionTypeEsocialEnum(Enum):
    VALUE_1 = "_1"
    VALUE_2 = "_2"
    VALUE_101 = "_101"
    VALUE_102 = "_102"
    VALUE_103 = "_103"
    VALUE_104 = "_104"
    VALUE_105 = "_105"
    VALUE_106 = "_106"
    VALUE_107 = "_107"
    VALUE_108 = "_108"
    VALUE_111 = "_111"
    VALUE_201 = "_201"
    VALUE_202 = "_202"
    VALUE_301 = "_301"
    VALUE_302 = "_302"
    VALUE_303 = "_303"
    VALUE_304 = "_304"
    VALUE_305 = "_305"
    VALUE_306 = "_306"
    VALUE_307 = "_307"
    VALUE_308 = "_308"
    VALUE_309 = "_309"
    VALUE_310 = "_310"
    VALUE_311 = "_311"
    VALUE_312 = "_312"
    VALUE_313 = "_313"
    VALUE_401 = "_401"
    VALUE_410 = "_410"
    VALUE_501 = "_501"
    VALUE_701 = "_701"
    VALUE_711 = "_711"
    VALUE_712 = "_712"
    VALUE_722 = "_722"
    VALUE_721 = "_721"
    VALUE_723 = "_723"
    VALUE_731 = "_731"
    VALUE_734 = "_734"
    VALUE_738 = "_738"
    VALUE_741 = "_741"
    VALUE_751 = "_751"
    VALUE_761 = "_761"
    VALUE_771 = "_771"
    VALUE_781 = "_781"
    VALUE_901 = "_901"
    VALUE_902 = "_902"
    VALUE_903 = "_903"
    VALUE_904 = "_904"
    VALUE_906 = "_906"


class AdmissionTypeRaisEnum(Enum):
    FIRST_JOB = "FIRST_JOB"
    REPLACEMENT = "REPLACEMENT"
    EMPLOYEE_TRANSFER_WITH_ONUS = "EMPLOYEE_TRANSFER_WITH_ONUS"
    EMPLOYEE_TRANSFER_WITHOUT_ONUS = "EMPLOYEE_TRANSFER_WITHOUT_ONUS"
    REINTEGRATION = "REINTEGRATION"
    RECOVERY = "RECOVERY"
    REVERSAL = "REVERSAL"
    REQUEST = "REQUEST"
    PROVISIONAL_EXERCISE = "PROVISIONAL_EXERCISE"
    READAPTATION = "READAPTATION"
    REDISTRIBUTION = "REDISTRIBUTION"
    DECENTRALIZED_EXERCISE = "DECENTRALIZED_EXERCISE"
    REMOVAL = "REMOVAL"


class ApplicationEmissionEnum(Enum):
    EMPLOYEE_APPLICATION = "EMPLOYEE_APPLICATION"
    GOVERNMENTAL_APPLICATION_DOMESTIC_EMPLOYEE = (
        "GOVERNMENTAL_APPLICATION_DOMESTIC_EMPLOYEE"
    )
    GOVERNMENTAL_APPLICATION_GENERAL_WEB = (
        "GOVERNMENTAL_APPLICATION_GENERAL_WEB"
    )
    GOVERNMENTAL_APPLICATION_INDIVIDUAL_MICROENTREPRENEUR_MEI = (
        "GOVERNMENTAL_APPLICATION_INDIVIDUAL_MICROENTREPRENEUR_MEI"
    )
    GOVERNMENTAL_APPLICATION_SPECIAL_INSURED = (
        "GOVERNMENTAL_APPLICATION_SPECIAL_INSURED"
    )


class BenefitSituationEsocialEnum(Enum):
    BENEFIT_GRANTED = "BENEFIT_GRANTED"
    BENEFIT_TRANSFERRED = "BENEFIT_TRANSFERRED"


class BiddingModalityEnum(Enum):
    INVITATION = "INVITATION"
    TAKING_PRICE = "TAKING_PRICE"
    COMPETITION = "COMPETITION"
    CONCOURSE = "CONCOURSE"
    FACE_TRADING = "FACE_TRADING"
    ELECTRONIC_TRADING = "ELECTRONIC_TRADING"
    AUCTION = "AUCTION"
    SALE = "SALE"
    PRESENCIAL_RDC = "PRESENCIAL_RDC"
    ELETRONIC_RDC = "ELETRONIC_RDC"
    BIDDING_PROCESS_LAW_13303_2006 = "BIDDING_PROCESS_LAW_13303_2006"


@dataclass
class CancelarNfse:
    class Meta:
        name = "cancelarNfse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    CancelarNfseEnvio: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CancelarNfseResponse:
    class Meta:
        name = "cancelarNfseResponse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    cancelarNfseResposta: Optional[str] = field(
        default=None,
        metadata={
            "name": "CancelarNfseResposta",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CancelarRps:
    class Meta:
        name = "cancelarRps"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    CancelarRpsEnvio: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CancelarRpsResponse:
    class Meta:
        name = "cancelarRpsResponse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    CancelarRpsResposta: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


class CertifiedCivilianTemplateEnum(Enum):
    TEMPLATE_OLD = "TEMPLATE_OLD"
    TEMPLATE_NEW = "TEMPLATE_NEW"


@dataclass
class ConsultarLoteRps:
    class Meta:
        name = "consultarLoteRps"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    ConsultarLoteRpsEnvio: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ConsultarLoteRpsResponse:
    class Meta:
        name = "consultarLoteRpsResponse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    ConsultarLoteRpsResposta: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ConsultarNfseRps:
    class Meta:
        name = "consultarNfseRps"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    ConsultarNfseRpsEnvio: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ConsultarNfseRpsResponse:
    class Meta:
        name = "consultarNfseRpsResponse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    ConsultarNfseRpsResposta: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ConsultarPdfNfseRps:
    class Meta:
        name = "consultarPdfNfseRps"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    arg0: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ConsultarPdfNfseRpsResponse:
    class Meta:
        name = "consultarPdfNfseRpsResponse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    nfse_pdf: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )


@dataclass
class ConsultarPdfRest:
    class Meta:
        name = "consultarPdfRest"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    arg0: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ConsultarPdfRestResponse:
    class Meta:
        name = "consultarPdfRestResponse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    ConsultarRestTomador: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )


class DeficiencyTypeEnum(Enum):
    DEFICIENCY = "DEFICIENCY"
    PHYSICAL = "PHYSICAL"
    VISUAL = "VISUAL"
    HEARING = "HEARING"
    MENTAL = "MENTAL"
    INTELLECTUAL = "INTELLECTUAL"
    GLOBAL_DEVELOPMENTAL_DISORDER = "GLOBAL_DEVELOPMENTAL_DISORDER"
    HIGH_ABILITY = "HIGH_ABILITY"


class DependentTypeColareEnum(Enum):
    SPOUSE = "SPOUSE"
    STABLE_UNION = "STABLE_UNION"
    MINOR_CHILD = "MINOR_CHILD"
    UNABLE_ELDER = "UNABLE_ELDER"
    DISABLED_ELDER = "DISABLED_ELDER"
    OLDER_CHILD_STUDYING_HIGHER_EDUCATION = (
        "OLDER_CHILD_STUDYING_HIGHER_EDUCATION"
    )
    MOM_DAD = "MOM_DAD"
    YOUNGER_BROTHER = "YOUNGER_BROTHER"
    MINOR_UNDER_GUARD = "MINOR_UNDER_GUARD"
    MINOR_UNDER_GUARDIANSHIP = "MINOR_UNDER_GUARDIANSHIP"
    OTHER_THAN_FITTING = "OTHER_THAN_FITTING"


class DependentTypeEsocialEnum(Enum):
    SPOUSE = "SPOUSE"
    STABLE_UNION = "STABLE_UNION"
    CHILD = "CHILD"
    OLDER_CHILD_STUDYING_HIGHER_EDUCATION = (
        "OLDER_CHILD_STUDYING_HIGHER_EDUCATION"
    )
    YOUNGER_BROTHER = "YOUNGER_BROTHER"
    YOUNGER_BROTHER_STUDYING_HIGHER_EDUCATION = (
        "YOUNGER_BROTHER_STUDYING_HIGHER_EDUCATION"
    )
    MOM_DAD = "MOM_DAD"
    MINOR_UNDER_GUARD = "MINOR_UNDER_GUARD"
    INCAPABLE_PERSON = "INCAPABLE_PERSON"
    UNABLE_ELDER = "UNABLE_ELDER"
    OTHER_THAN_FITTING = "OTHER_THAN_FITTING"


class DeviceEnum(Enum):
    ANDROID = "ANDROID"
    IOS = "IOS"
    WEB = "WEB"
    UNDEFINED = "UNDEFINED"


class DiscountsCategoryColareEnum(Enum):
    RPPS = "RPPS"
    INSS = "INSS"
    IRRF = "IRRF"
    DISCIPLINARY_SANCTION = "DISCIPLINARY_SANCTION"
    JUDICIAL_SENTENCE = "JUDICIAL_SENTENCE"
    ADVANCE = "ADVANCE"
    DAYS_NOT_WORKED = "DAYS_NOT_WORKED"
    UNION_ASSOCIATION_CONTRIBUTION = "UNION_ASSOCIATION_CONTRIBUTION"
    MEDICAL_DENTAL_ASSISTANCE = "MEDICAL_DENTAL_ASSISTANCE"
    CONSTITUTIONAL_CEILING_COURT = "CONSTITUTIONAL_CEILING_COURT"
    PERSONAL_DISCOUNT = "PERSONAL_DISCOUNT"


class DispositionTypeEnum(Enum):
    WITH_CHARGES_DESTINATION_WITHIN_MUNICIPALITY = (
        "WITH_CHARGES_DESTINATION_WITHIN_MUNICIPALITY"
    )
    WITH_CHARGES_DESTINATION_ANOTHER_MUNICIPALITY = (
        "WITH_CHARGES_DESTINATION_ANOTHER_MUNICIPALITY"
    )
    WITH_ONUS_DESTINATION_STATE_AGENCY = "WITH_ONUS_DESTINATION_STATE_AGENCY"
    WITH_ONUS_DESTINATION_FEDERAL_AGENCY = (
        "WITH_ONUS_DESTINATION_FEDERAL_AGENCY"
    )
    FREE_CHARGE_DESTINATION_WITHIN_MUNICIPALITY = (
        "FREE_CHARGE_DESTINATION_WITHIN_MUNICIPALITY"
    )
    WITHOUT_CHARGE_DESTINATION_ANOTHER_MUNICIPALITY = (
        "WITHOUT_CHARGE_DESTINATION_ANOTHER_MUNICIPALITY"
    )
    WITHOUT_ONUS_DESTINATION_STATE_AGENCY = (
        "WITHOUT_ONUS_DESTINATION_STATE_AGENCY"
    )
    FREE_CHARGE_DESTINATION_FEDERAL_AGENCY = (
        "FREE_CHARGE_DESTINATION_FEDERAL_AGENCY"
    )
    PARTIAL_BURDEN = "PARTIAL_BURDEN"


class DocumentTypePossessionEnum(Enum):
    APPOINTMENT_ACT = "APPOINTMENT_ACT"
    POSSESSION_TERM = "POSSESSION_TERM"
    MANIFESTATION_INTERNAL_CONTROL = "MANIFESTATION_INTERNAL_CONTROL"
    PROOF_OF_EDUCATION = "PROOF_OF_EDUCATION"
    MEDICAL_REPORT_MEDICAL_BOARD = "MEDICAL_REPORT_MEDICAL_BOARD"
    ACT_EXONERATION = "ACT_EXONERATION"


class EarningDiscountEnum(Enum):
    P = "P"
    D = "D"


class EndPointPersonalColareEnum(Enum):
    FILE = "FILE"
    PERSONAL_LEGISLATION_SEND = "PERSONAL_LEGISLATION_SEND"
    PERSONAL_POSITION_SEND = "PERSONAL_POSITION_SEND"
    PERSONAL_PROCESS_SELECTIVE = "PERSONAL_PROCESS_SELECTIVE"
    PERSONAL_PROCESS_SELECTIVE_SIMPLIFIED = (
        "PERSONAL_PROCESS_SELECTIVE_SIMPLIFIED"
    )
    PERSONAL_HOMOLOGATION = "PERSONAL_HOMOLOGATION"
    PERSONAL_HOMOLOGATION_ROW = "PERSONAL_HOMOLOGATION_ROW"
    PERSONAL_REGISTER = "PERSONAL_REGISTER"
    PERSONAL_ADMISSION = "PERSONAL_ADMISSION"
    PERSONAL_CAPACITY = "PERSONAL_CAPACITY"
    PERSONAL_INACTIVIT = "PERSONAL_INACTIVIT"
    PERSONAL_DISPOSITION = "PERSONAL_DISPOSITION"
    PERSONAL_LICENSE = "PERSONAL_LICENSE"
    PERSONAL_SOCIAL_SECURITY = "PERSONAL_SOCIAL_SECURITY"
    PERSONAL_EVENT_SEND = "PERSONAL_EVENT_SEND"
    PERSONAL_RECTIFICATION = "PERSONAL_RECTIFICATION"
    PERSONAL_POLITICAL_AGENTS_GRANTS = "PERSONAL_POLITICAL_AGENTS_GRANTS"
    PERSONAL_RETIREMENT = "PERSONAL_RETIREMENT"
    PERSONAL_PENSIONER = "PERSONAL_PENSIONER"
    PERSONAL_CONCESSION_ADVANTAGE_DISCOUNT = (
        "PERSONAL_CONCESSION_ADVANTAGE_DISCOUNT"
    )
    PERSONAL_CONCESSION_GENERAL_ADVANTAGE = (
        "PERSONAL_CONCESSION_GENERAL_ADVANTAGE"
    )
    PERSONAL_PAYROLL = "PERSONAL_PAYROLL"
    PERSONAL_UPDATE_POSITION = "PERSONAL_UPDATE_POSITION"
    PERSONAL_EXECUTION_PAYROLL = "PERSONAL_EXECUTION_PAYROLL"


@dataclass
class EnviarLoteRpsSincrono:
    class Meta:
        name = "enviarLoteRpsSincrono"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    EnviarLoteRpsSincronoEnvio: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EnviarLoteRpsSincronoResponse:
    class Meta:
        name = "enviarLoteRpsSincronoResponse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    EnviarLoteRpsSincronoResposta: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


class ExaminingBoardTypeEnum(Enum):
    PROPER = "PROPER"
    OUTSOURCED = "OUTSOURCED"


class ExpirationTypeColareEnum(Enum):
    MONTH = "MONTH"
    YEAR = "YEAR"


class ExpirationTypeContractColareEnum(Enum):
    DAYS = "DAYS"
    MONTH = "MONTH"
    YEAR = "YEAR"


class FederatedEntityTypeColareEnum(Enum):
    COUNTY = "COUNTY"
    STATE = "STATE"
    FEDERAL_DISTRICT = "FEDERAL_DISTRICT"
    UNITY = "UNITY"


class ForeignEntryConditionEnum(Enum):
    REFUGEE = "REFUGEE"
    ASYLUM_SEEKER = "ASYLUM_SEEKER"
    STAY_IN_BRAZIL_DUE_TO_FAMILY_REUNION = (
        "STAY_IN_BRAZIL_DUE_TO_FAMILY_REUNION"
    )
    BENEFITED_FROM_THE_AGREEMENT_BETWEEN_MERCOSUR_COUNTRIES = (
        "BENEFITED_FROM_THE_AGREEMENT_BETWEEN_MERCOSUR_COUNTRIES"
    )
    DEPENDENT_ON_DIPLOMATIC_AGENT = "DEPENDENT_ON_DIPLOMATIC_AGENT"
    BENEFITED_FROM_THE_TREATY_OF_FRIENDSHIP = (
        "BENEFITED_FROM_THE_TREATY_OF_FRIENDSHIP"
    )
    OTHER_CONDITION = "OTHER_CONDITION"


class ForeignResidencyTimeEnum(Enum):
    INDEFINITE_DEADLINE = "INDEFINITE_DEADLINE"
    DETERMINED_DEADLINE = "DETERMINED_DEADLINE"


@dataclass
class GerarNfse:
    class Meta:
        name = "gerarNfse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    GerarNfseEnvio: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class GerarNfseResponse:
    class Meta:
        name = "gerarNfseResponse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    GerarNfseRetorno: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


class GlobalModuleEnum(Enum):
    TAX_MANAGEMENTE = "TAX_MANAGEMENTE"
    FLEET = "FLEET"
    HUMAN_RESOURSES = "HUMAN_RESOURSES"
    PROTOCAL = "PROTOCAL"
    SHOPPING = "SHOPPING"
    AUCTION = "AUCTION"


class HarmfulAgentExposureDegreeEnum(Enum):
    NO_OPPORTUNITY = "NO_OPPORTUNITY"
    OPPORTUNITY_12 = "OPPORTUNITY_12"
    OPPORTUNITY_9 = "OPPORTUNITY_9"
    OPPORTUNITY_6 = "OPPORTUNITY_6"


class InscriptionTypeEnum(Enum):
    CNPJ = "CNPJ"
    CPF = "CPF"
    CAEPF = "CAEPF"
    CNO = "CNO"
    CGC = "CGC"


@dataclass
class KeyStore:
    class Meta:
        name = "keyStore"


class LearnerContractEnum(Enum):
    DISPENSED_ACCORDING_LAW = "DISPENSED_ACCORDING_LAW"
    DISPENSED_EVEN_PARTIALLY_VIRTUDE_LEGAL_PROCEEDINGS = (
        "DISPENSED_EVEN_PARTIALLY_VIRTUDE_LEGAL_PROCEEDINGS"
    )
    REQUIRED = "REQUIRED"


class ManadBondTypeEnum(Enum):
    NORMAL_BOND = "NORMAL_BOND"
    TEMPORARY_RELATIONSHIP = "TEMPORARY_RELATIONSHIP"
    STATUTORY_EFFECTIVE_PUBLIC_SERVANT = "STATUTORY_EFFECTIVE_PUBLIC_SERVANT"
    CLT_CIVIL_SERVANT = "CLT_CIVIL_SERVANT"
    COMMISSIONED_CIVIL_SERVANT = "COMMISSIONED_CIVIL_SERVANT"
    PUBLIC_SERVANT_ASSIGNED = "PUBLIC_SERVANT_ASSIGNED"
    POLITICAL_AGENTS = "POLITICAL_AGENTS"
    INDIVIDUAL_TAXPAYER = "INDIVIDUAL_TAXPAYER"
    OTHER_BONDS = "OTHER_BONDS"


class MassSegregationTypeEnum(Enum):
    NO_MASS_SEGREGATION = "NO_MASS_SEGREGATION"
    CAPITALIZATION_FUND = "CAPITALIZATION_FUND"
    SHARED_FUND = "SHARED_FUND"
    MAINTAINED_TREASURY = "MAINTAINED_TREASURY"


class NatureEventEnum(Enum):
    FIXED = "FIXED"
    VARIABLE = "VARIABLE"


class PaymentUnitCodeEnum(Enum):
    PER_HOUR = "PER_HOUR"
    PER_DAY = "PER_DAY"
    PER_WEEK = "PER_WEEK"
    PER_FORTNIGHT = "PER_FORTNIGHT"
    PER_MONTH = "PER_MONTH"
    PER_TASK = "PER_TASK"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class PensionTypeColareEnum(Enum):
    PENSION_DEATH_TOTAL_EARNINGS = "PENSION_DEATH_TOTAL_EARNINGS"
    PENSION_DEATH_TOTAL_LAST_REMUNERATION = (
        "PENSION_DEATH_TOTAL_LAST_REMUNERATION"
    )
    PENSION_MERCE = "PENSION_MERCE"
    JUDICIAL_PENSION = "JUDICIAL_PENSION"


class PointRecordEnum(Enum):
    DO_NOT_USE = "DO_NOT_USE"
    MANUAL = "MANUAL"
    MECHANICAL = "MECHANICAL"
    ELECTRONIC = "ELECTRONIC"
    NON_ELECTRONIC_ALTERNATIVE = "NON_ELECTRONIC_ALTERNATIVE"
    ELECTRONIC_ALTERNATIVE = "ELECTRONIC_ALTERNATIVE"
    OTHERS = "OTHERS"


class ProvisionTypeEsocialEnum(Enum):
    VALUE_1 = "_1"
    VALUE_2 = "_2"
    VALUE_3 = "_3"
    VALUE_5 = "_5"
    VALUE_6 = "_6"
    VALUE_7 = "_7"
    VALUE_8 = "_8"
    VALUE_9 = "_9"
    VALUE_10 = "_10"
    VALUE_11 = "_11"
    VALUE_99 = "_99"


@dataclass
class PublicManagement:
    class Meta:
        name = "publicManagement"

    creationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    creationUser: Optional["User"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    exclusionDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    exclusionUser: Optional["User"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    updateDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    updateUser: Optional["User"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PublicManagementDto:
    class Meta:
        name = "publicManagementDTO"


class QuinquennialPositionOriginEnum(Enum):
    CHOOSE = "CHOOSE"
    NOT = "NOT"
    POSITION_ORIGIN = "POSITION_ORIGIN"
    POSITION_OTHER_ENTITY = "POSITION_OTHER_ENTITY"
    ANOTHER_ADMISSION_DATE = "ANOTHER_ADMISSION_DATE"


class ReasonShutdownBenefitEsocialEnum(Enum):
    VALUE_01 = "_01"
    VALUE_02 = "_02"
    VALUE_03 = "_03"
    VALUE_04 = "_04"
    VALUE_05 = "_05"
    VALUE_06 = "_06"
    VALUE_07 = "_07"
    VALUE_08 = "_08"
    VALUE_09 = "_09"
    VALUE_10 = "_10"
    VALUE_11 = "_11"


class ReasonShutdownEsocialEnum(Enum):
    VALUE_01 = "_01"
    VALUE_02 = "_02"
    VALUE_03 = "_03"
    VALUE_04 = "_04"
    VALUE_05 = "_05"
    VALUE_06 = "_06"
    VALUE_07 = "_07"
    VALUE_08 = "_08"
    VALUE_09 = "_09"
    VALUE_10 = "_10"
    VALUE_11 = "_11"
    VALUE_12 = "_12"
    VALUE_13 = "_13"
    VALUE_14 = "_14"
    VALUE_16 = "_16"
    VALUE_17 = "_17"
    VALUE_21 = "_21"
    VALUE_22 = "_22"
    VALUE_23 = "_23"
    VALUE_24 = "_24"
    VALUE_25 = "_25"
    VALUE_26 = "_26"
    VALUE_27 = "_27"
    VALUE_29 = "_29"
    VALUE_30 = "_30"
    VALUE_31 = "_31"
    VALUE_32 = "_32"
    VALUE_33 = "_33"
    VALUE_34 = "_34"
    VALUE_36 = "_36"
    VALUE_37 = "_37"
    VALUE_38 = "_38"
    VALUE_39 = "_39"
    VALUE_40 = "_40"
    VALUE_41 = "_41"
    VALUE_42 = "_42"
    VALUE_43 = "_43"


class RemunerationCategoryColareEnum(Enum):
    BASE_SALARY = "BASE_SALARY"
    ADDITIONAL = "ADDITIONAL"
    GRATIFICATION = "GRATIFICATION"
    SUPPORT = "SUPPORT"
    ALLOWANCE = "ALLOWANCE"
    WORK_AGREEMENT = "WORK_AGREEMENT"
    WORK_CONVENTION = "WORK_CONVENTION"
    SUBSIDY = "SUBSIDY"
    SALARY = "SALARY"
    ASSISTANCE_BENEFIT = "ASSISTANCE_BENEFIT"
    THIRTEEN_FIRST_SALARY = "THIRTEEN_FIRST_SALARY"
    THIRD_VACATION = "THIRD_VACATION"
    MINIMUM_WAGE_SUPPLEMENT = "MINIMUM_WAGE_SUPPLEMENT"
    SOCIAL_SECURITY_BENEFIT = "SOCIAL_SECURITY_BENEFIT"
    PERSONAL_ADVANTAGE = "PERSONAL_ADVANTAGE"
    AVERAGE_PENSION_INCOME = "AVERAGE_PENSION_INCOME"
    AVERAGE_RETIREMENT_EARNINGS = "AVERAGE_RETIREMENT_EARNINGS"
    SUBSISTENCE_ALLOWANCE = "SUBSISTENCE_ALLOWANCE"
    DAILY = "DAILY"
    EXTRA_HOUR = "EXTRA_HOUR"
    PRIZE_BONUS = "PRIZE_BONUS"
    INDEMNITY = "INDEMNITY"
    FGTS = "FGTS"


class ResponsibleManagementUnitTypeEnum(Enum):
    PREFECTURE = "PREFECTURE"
    CHAMBER = "CHAMBER"
    RPPS_AUTARCHY = "RPPS_AUTARCHY"
    OUTER_AUTARCHY = "OUTER_AUTARCHY"
    PUBLIC_PUBLICS_FOUNDATION = "PUBLIC_PUBLICS_FOUNDATION"
    PUBLIC_COMPANY = "PUBLIC_COMPANY"
    MIXED_ECONOMY_SOCIETY = "MIXED_ECONOMY_SOCIETY"


class SchoolingColareEnum(Enum):
    FUNDAMENTAL_INCOMPLETE = "FUNDAMENTAL_INCOMPLETE"
    FUNDAMENTAL_COMPLETE = "FUNDAMENTAL_COMPLETE"
    MEDIUM_COMPLETE = "MEDIUM_COMPLETE"
    COMPLETE_HIGHER = "COMPLETE_HIGHER"
    POSTGRADUATE = "POSTGRADUATE"
    MASTER = "MASTER"
    DOCTOR = "DOCTOR"


class SchoolingEsocialEnum(Enum):
    ILLITERATE = "ILLITERATE"
    UNTIL_5_TH_YEAR_ELEMENTARY_SCHOOL = "UNTIL_5TH_YEAR_ELEMENTARY_SCHOOL"
    FIFTH_YEAR_OF_ELEMENTARY_SCHOOL = "FIFTH_YEAR_OF_ELEMENTARY_SCHOOL"
    SIXTH_TO_NINTH_OF_ELEMENTARY_SCHOOL = "SIXTH_TO_NINTH_OF_ELEMENTARY_SCHOOL"
    COMPLETE_ELEMENTARY_SCHOLL = "COMPLETE_ELEMENTARY_SCHOLL"
    INCOMPLETE_HIGH_SCHOLL = "INCOMPLETE_HIGH_SCHOLL"
    COMPLETE_HIGH_SCHOLL = "COMPLETE_HIGH_SCHOLL"
    INCOMPLETE_COLLEGE = "INCOMPLETE_COLLEGE"
    COMPLETE_COLLEGE = "COMPLETE_COLLEGE"
    POSTGRADUATE = "POSTGRADUATE"
    MASTERS = "MASTERS"
    DOCTORATE_DEGREE = "DOCTORATE_DEGREE"


class SchoolingRaisEnum(Enum):
    ILLITERATE = "ILLITERATE"
    UNTIL_5_TH_YEAR_ELEMENTARY_SCHOOL = "UNTIL_5TH_YEAR_ELEMENTARY_SCHOOL"
    FIFTH_YEAR_OF_ELEMENTARY_SCHOOL = "FIFTH_YEAR_OF_ELEMENTARY_SCHOOL"
    SIXTH_TO_NINTH_OF_ELEMENTARY_SCHOOL = "SIXTH_TO_NINTH_OF_ELEMENTARY_SCHOOL"
    COMPLETE_ELEMENTARY_SCHOLL = "COMPLETE_ELEMENTARY_SCHOLL"
    INCOMPLETE_HIGH_SCHOLL = "INCOMPLETE_HIGH_SCHOLL"
    COMPLETE_HIGH_SCHOLL = "COMPLETE_HIGH_SCHOLL"
    INCOMPLETE_COLLEGE = "INCOMPLETE_COLLEGE"
    COMPLETE_COLLEGE = "COMPLETE_COLLEGE"
    MASTERS = "MASTERS"
    DOCTORATE_DEGREE = "DOCTORATE_DEGREE"


class SelectionNoticeTypeEnum(Enum):
    CONTEST_PUBLIC = "CONTEST_PUBLIC"
    PROCESS_SELECTION_PUBLIC = "PROCESS_SELECTION_PUBLIC"
    PROCESS_SELECTION_PUBLIC_SIMPLIFIED = "PROCESS_SELECTION_PUBLIC_SIMPLIFIED"


class SexEnum(Enum):
    M = "M"
    F = "F"
    O = "O"
    U = "U"


class SimpleAttachmentEnum(Enum):
    SIMPLE_ATTACHMENTENUM_I = "SIMPLE_ATTACHMENTENUM_I"
    SIMPLE_ATTACHMENTENUM_II = "SIMPLE_ATTACHMENTENUM_II"
    SIMPLE_ATTACHMENTENUM_III = "SIMPLE_ATTACHMENTENUM_III"
    SIMPLE_ATTACHMENTENUM_IV = "SIMPLE_ATTACHMENTENUM_IV"
    SIMPLE_ATTACHMENTENUM_V = "SIMPLE_ATTACHMENTENUM_V"


class SpecialTimeCountingEnum(Enum):
    NOT = "NOT"
    TEACHER = "TEACHER"
    TECAHER_HIGHER_EDUCATION_MAGISTRATE = "TECAHER_HIGHER_EDUCATION_MAGISTRATE"
    RISK_ACTIVITY = "RISK_ACTIVITY"


class StandardDetailColareEnum(Enum):
    STATUTE_PUBLIC_SERVANTS = "STATUTE_PUBLIC_SERVANTS"
    PLAN_FOR_JOBS_WAGES = "PLAN_FOR_JOBS_WAGES"
    TEACHING_POSITIONS_SALARYPLAN = "TEACHING_POSITIONS_SALARYPLAN"
    ADMINISTRATIVE_STRUCTURE_ORGANIZATION = (
        "ADMINISTRATIVE_STRUCTURE_ORGANIZATION"
    )
    TEMPORARY_CONTRACTING_LAW = "TEMPORARY_CONTRACTING_LAW"
    RPPS_LAW_BENEFIT_PLAN = "RPPS_LAW_BENEFIT_PLAN"
    PAINTING_PERSONAL = "PAINTING_PERSONAL"
    ANNUAL_GENERAL_REVIEW_LAW_INFLATIONARY_POLICY = (
        "ANNUAL_GENERAL_REVIEW_LAW_INFLATIONARY_POLICY"
    )
    ANNUAL_GENERAL_REVIEW_LAW = "ANNUAL_GENERAL_REVIEW_LAW"
    DETERMINATION_POLITICAL_AGENT_ALLOWANCES = (
        "DETERMINATION_POLITICAL_AGENT_ALLOWANCES"
    )
    PUBLIC_TENDER_REGULATION_SELECTION = "PUBLIC_TENDER_REGULATION_SELECTION"
    REGULATION_POSITIONS_SALARIES_BENEFITS = (
        "REGULATION_POSITIONS_SALARIES_BENEFITS"
    )
    PUBLIC_COMPANY_REGULATION_POSITIONS_SALARIES_BENEFITS = (
        "PUBLIC_COMPANY_REGULATION_POSITIONS_SALARIES_BENEFITS"
    )
    CHANGE_OF_LEGAL_REGIME = "CHANGE_OF_LEGAL_REGIME"
    NOT_FOUND = "NOT_FOUND"


class StandardIssueColareEnum(Enum):
    PROVISION = "PROVISION"
    VACANCY = "VACANCY"
    REMOVAL_REDISTRIBUTION = "REMOVAL_REDISTRIBUTION"
    REPLACEMENT = "REPLACEMENT"
    PUBLIC_SERVANT_VACATION = "PUBLIC_SERVANT_VACATION"
    REMUNERATED_LEAVE = "REMUNERATED_LEAVE"
    NOT_REMUNERATED_LEAVE = "NOT_REMUNERATED_LEAVE"
    REMOVAL = "REMOVAL"
    CONCESSION = "CONCESSION"
    SERVICE_TIME = "SERVICE_TIME"
    RIGHT_PETITION = "RIGHT_PETITION"
    DISCIPLINAR_REGIME = "DISCIPLINAR_REGIME"
    ACCUMULATION = "ACCUMULATION"
    DISCIPLINARY_ADMINISTRATIVE_PROCESS = "DISCIPLINARY_ADMINISTRATIVE_PROCESS"
    RPPS_BENEFIT_SCHEME = "RPPS_BENEFIT_SCHEME"
    BENEFICIARIES = "BENEFICIARIES"
    RETIREMENT = "RETIREMENT"
    PENSION_DEATH = "PENSION_DEATH"
    ILLNESS_AID = "ILLNESS_AID"
    SECLUSION_AID = "SECLUSION_AID"
    MATERNITY_PAY = "MATERNITY_PAY"
    FAMILY_SALARY = "FAMILY_SALARY"
    SOCIAL_SECURITY_TAX_RATE = "SOCIAL_SECURITY_TAX_RATE"
    RPPS_ORGANIZATION = "RPPS_ORGANIZATION"
    RPPS_COSTING = "RPPS_COSTING"
    PUBLIC_TENDER = "PUBLIC_TENDER"
    PUBLIC_SELECTION_PROCESS_PSP = "PUBLIC_SELECTION_PROCESS_PSP"
    SIMPLIFIED_SELECTION_PROCESS_PSS = "SIMPLIFIED_SELECTION_PROCESS_PSS"
    PCD_QUOTAS = "PCD_QUOTAS"
    RACIAL_QUOTAS = "RACIAL_QUOTAS"
    SOCIOECONOMIC_QUOTAS = "SOCIOECONOMIC_QUOTAS"
    TEMPORARY_CONTRACTING_AUTHORIZATION = "TEMPORARY_CONTRACTING_AUTHORIZATION"
    CASES_EXCEPTIONAL_PUBLIC_INTEREST = "CASES_EXCEPTIONAL_PUBLIC_INTEREST"
    POSITIONS_JOBS_FUNCTIONS_CREATION = "POSITIONS_JOBS_FUNCTIONS_CREATION"
    QUANTITATIVE_MODIFICATION_POSITIONS_JOBS_FUNCTIONS = (
        "QUANTITATIVE_MODIFICATION_POSITIONS_JOBS_FUNCTIONS"
    )
    EXTINCTION_POSITIONS_JOBS_FUNCTIONS = "EXTINCTION_POSITIONS_JOBS_FUNCTIONS"
    TIME_LOAD_SETTING_ADJUSTMENTS = "TIME_LOAD_SETTING_ADJUSTMENTS"
    ASSIGNMENTS = "ASSIGNMENTS"
    PROVISIONING_REQUIREMENTS = "PROVISIONING_REQUIREMENTS"
    DISPOSITION_ASSIGNMENT = "DISPOSITION_ASSIGNMENT"
    PROMOTION_PROGRESSION = "PROMOTION_PROGRESSION"
    TRANSFORMATION_TRANSPOSITION_NOMENCLATURE_CHANGE = (
        "TRANSFORMATION_TRANSPOSITION_NOMENCLATURE_CHANGE"
    )
    FRAMEWORK_UTILIZATION = "FRAMEWORK_UTILIZATION"
    ANNUAL_GENERAL_REVIEW = "ANNUAL_GENERAL_REVIEW"
    SUBSIDY_SETTING = "SUBSIDY_SETTING"
    REVIEW_INFLATION_REPLACEMENT = "REVIEW_INFLATION_REPLACEMENT"
    READJUSTMENT = "READJUSTMENT"
    INFLATIONARY_INDEX = "INFLATIONARY_INDEX"
    DISCOUNTS = "DISCOUNTS"
    CREATE_PECUNIARY_ADVANTAGE = "CREATE_PECUNIARY_ADVANTAGE"
    MODIFY_PECUNIARY_ADVANTAGE = "MODIFY_PECUNIARY_ADVANTAGE"
    EXTINGUISH_CASH_ADVANTAGE = "EXTINGUISH_CASH_ADVANTAGE"
    THIRTEENTH_POLITICAL_AGENT_SALARY = "THIRTEENTH_POLITICAL_AGENT_SALARY"
    POLITICAL_AGENT_VACATIONS = "POLITICAL_AGENT_VACATIONS"
    MAGISTERIUM_FLOOR = "MAGISTERIUM_FLOOR"
    MUNICIPAL_MINIMUM_WAGE = "MUNICIPAL_MINIMUM_WAGE"
    POSITIONS_JOBS_CIVIL_SERVICE = "POSITIONS_JOBS_CIVIL_SERVICE"
    SALARY_REMUNERATION_ALLOWANCES = "SALARY_REMUNERATION_ALLOWANCES"
    ADMINISTRATIVE_PROCESS = "ADMINISTRATIVE_PROCESS"
    CLEAN_SHEET = "CLEAN_SHEET"
    DAILY = "DAILY"
    INTERNAL_CONTROL = "INTERNAL_CONTROL"
    GRATIFICATIONS = "GRATIFICATIONS"
    AIDS = "AIDS"
    ADDITIONAL = "ADDITIONAL"
    ALLOWANCES = "ALLOWANCES"
    AWARDS_BONUSES = "AWARDS_BONUSES"
    WORKDAY_CHANGE = "WORKDAY_CHANGE"
    REPT_SPECIAL_WORK_REGIME_MUNICIPAL_GUARD = (
        "REPT_SPECIAL_WORK_REGIME_MUNICIPAL_GUARD"
    )
    LEGAL_DISCOUNTS = "LEGAL_DISCOUNTS"
    DISCOUN_COVENANTS_CONSIGNMENTS = "DISCOUN_COVENANTS_CONSIGNMENTS"
    BUDGET_GUIDELINES_LAW = "BUDGET_GUIDELINES_LAW"


class StandardTypeColareEnum(Enum):
    MUNICIPAL_ORGANIC_LAW = "MUNICIPAL_ORGANIC_LAW"
    AMENDMENT_MUNICIPAL_ORGANIC_LAW = "AMENDMENT_MUNICIPAL_ORGANIC_LAW"
    COMPLEMENTARY_LAW = "COMPLEMENTARY_LAW"
    ORDINARY_LAW = "ORDINARY_LAW"
    LDO = "LDO"
    DECREE_LAW = "DECREE_LAW"
    EXECUTIVE_DECREE = "EXECUTIVE_DECREE"
    RESOLUTION = "RESOLUTION"
    LEGISLATIVE_DECREE = "LEGISLATIVE_DECREE"
    CONCEIRGE = "CONCEIRGE"
    LABOR_CONVENTION_AGREEMENT = "LABOR_CONVENTION_AGREEMENT"
    NORMATIVE_INSTRUCTION = "NORMATIVE_INSTRUCTION"
    PUBLIC_COMPANY_STANDARD = "PUBLIC_COMPANY_STANDARD"
    NOT_FOUND = "NOT_FOUND"


class StatusReceiptColareEnum(Enum):
    HOMOLOGADO = "HOMOLOGADO"
    NAO_HOMOLOGADO = "NAO_HOMOLOGADO"
    LIBERADO_PARA_RETIFICACAO = "LIBERADO_PARA_RETIFICACAO"
    NOT_SENDING = "NOT_SENDING"
    ERROR = "ERROR"


class TraineeLevelEnum(Enum):
    ELEMENTARY = "ELEMENTARY"
    MIDDLE = "MIDDLE"
    PROFESSIONAL_TRAINING = "PROFESSIONAL_TRAINING"
    HIGHER = "HIGHER"
    SPECIAL = "SPECIAL"
    SOCIAL_MOTHER = "SOCIAL_MOTHER"


class TypeAdministrativeActColareEnum(Enum):
    DECREE = "DECREE"
    PORTARIA = "PORTARIA"
    ACT = "ACT"


class TypeAdmissionWorkerEnum(Enum):
    ADMISSION_WORKER = "ADMISSION_WORKER"
    UNTIED_WORKER = "UNTIED_WORKER"
    BENEFICIARY = "BENEFICIARY"


class TypeAtuarialEnum(Enum):
    RETIREMENT_AGE = "RETIREMENT_AGE"
    RETIREMENT_TIME_CONTRIBUTION = "RETIREMENT_TIME_CONTRIBUTION"
    COMPULSORY_RETIREMENT = "COMPULSORY_RETIREMENT"
    DISABILITY_RETIREMENT = "DISABILITY_RETIREMENT"
    RETIREMENT_TEACHER = "RETIREMENT_TEACHER"
    SPECIAL_RETIREMENT_RISKY_ACTIVITY = "SPECIAL_RETIREMENT_RISKY_ACTIVITY"
    SPECIAL_RETIREMENT_ACTIVITIES_HARMFUL_HEALTH_PHYSICAL_INTEGRITY = (
        "SPECIAL_RETIREMENT_ACTIVITIES_HARMFUL_HEALTH_PHYSICAL_INTEGRITY"
    )
    NOT_FOUND = "NOT_FOUND"


class TypeBaseCourtEsocialEnum(Enum):
    VALUE_0101 = "_0101"
    VALUE_0102 = "_0102"
    VALUE_0103 = "_0103"
    VALUE_0104 = "_0104"
    VALUE_0105 = "_0105"
    VALUE_0106 = "_0106"
    VALUE_0107 = "_0107"
    VALUE_0108 = "_0108"
    VALUE_0109 = "_0109"
    VALUE_0201 = "_0201"
    VALUE_0202 = "_0202"
    VALUE_0203 = "_0203"
    VALUE_0204 = "_0204"
    VALUE_0205 = "_0205"
    VALUE_0206 = "_0206"
    VALUE_0207 = "_0207"
    VALUE_0208 = "_0208"
    VALUE_0301 = "_0301"
    VALUE_0302 = "_0302"
    VALUE_0303 = "_0303"
    VALUE_0304 = "_0304"
    VALUE_0305 = "_0305"
    VALUE_0401 = "_0401"
    VALUE_0402 = "_0402"
    VALUE_0403 = "_0403"
    VALUE_0404 = "_0404"
    VALUE_0405 = "_0405"
    VALUE_0501 = "_0501"
    VALUE_0502 = "_0502"
    VALUE_0503 = "_0503"
    VALUE_0504 = "_0504"
    VALUE_0601 = "_0601"
    VALUE_0602 = "_0602"
    VALUE_0603 = "_0603"
    VALUE_0604 = "_0604"
    VALUE_0701 = "_0701"
    VALUE_0702 = "_0702"
    VALUE_0801 = "_0801"
    VALUE_0802 = "_0802"
    VALUE_0803 = "_0803"
    VALUE_0804 = "_0804"
    VALUE_0805 = "_0805"
    VALUE_0806 = "_0806"
    VALUE_0807 = "_0807"
    VALUE_0808 = "_0808"
    VALUE_0809 = "_0809"
    VALUE_0810 = "_0810"
    VALUE_0811 = "_0811"
    VALUE_0812 = "_0812"
    VALUE_0901 = "_0901"
    VALUE_0902 = "_0902"
    VALUE_0909 = "_0909"
    VALUE_1001 = "_1001"
    VALUE_1009 = "_1009"
    VALUE_1101 = "_1101"
    VALUE_1102 = "_1102"
    VALUE_1103 = "_1103"
    VALUE_1104 = "_1104"
    VALUE_1105 = "_1105"
    VALUE_1106 = "_1106"


class TypeBenefitEsocialEnum(Enum):
    LIFE_TIME = "LIFE_TIME"
    TEMPORARY = "TEMPORARY"


class TypeCharacterColareEnum(Enum):
    ELIMINATION = "ELIMINATION"
    QUALIFYING = "QUALIFYING"


class TypeCouncilCodeColareEnum(Enum):
    NI = "NI"
    CRA = "CRA"
    AU = "AU"
    OAB = "OAB"
    CRESS = "CRESS"
    CRB = "CRB"
    CRBIO = "CRBIO"
    CRBM = "CRBM"
    CRC = "CRC"
    CORECON = "CORECON"
    CREF = "CREF"
    COREN = "COREN"
    CREA = "CREA"
    CRF = "CRF"
    CREFITO = "CREFITO"
    CRM = "CRM"
    CRO = "CRO"
    CRP = "CRP"
    CRN = "CRN"
    CRTR = "CRTR"
    CRMV = "CRMV"
    CREFONO = "CREFONO"


class TypeDetailingColareEnum(Enum):
    ROUNDING = "ROUNDING"
    VACANCIES = "VACANCIES"
    BOOKING_REGISTRATION = "BOOKING_REGISTRATION"
    BREAKTHROUGH_CRITERIA_AGE = "BREAKTHROUGH_CRITERIA_AGE"
    EXPERIENCE_TIEBREAKER_CRITERIA = "EXPERIENCE_TIEBREAKER_CRITERIA"
    EXEMPTION_FORECAST_DETAILING = "EXEMPTION_FORECAST_DETAILING"
    RETURN_FORECAST_DETAILING_CANCELLATION = (
        "RETURN_FORECAST_DETAILING_CANCELLATION"
    )
    RETURN_FORECAST_DETAILING_PAYMENT = "RETURN_FORECAST_DETAILING_PAYMENT"
    APPEAL_DEADLINE = "APPEAL_DEADLINE"
    POWER_ATTORNEY = "POWER_ATTORNEY"
    NON_PRESENT_RESOURCES = "NON_PRESENT_RESOURCES"
    ANNULLED_QUESTIONS = "ANNULLED_QUESTIONS"


class TypeDocumentColareEnum(Enum):
    MAIN_TEXT_LAW_STANDARD = "MAIN_TEXT_LAW_STANDARD"
    ANNEX_LAW_STANDARD = "ANNEX_LAW_STANDARD"
    NOT_FOUND = "NOT_FOUND"


class TypeDocumentContestColareEnum(Enum):
    NOTICE = "NOTICE"
    ANNEX = "ANNEX"


class TypeDocumentGrantColareEnum(Enum):
    LAW = "LAW"
    DECREE = "DECREE"
    ORDINANCE = "ORDINANCE"
    ACT = "ACT"


class TypeEntityEnum(Enum):
    PUBLIC_AGENCY = "PUBLIC_AGENCY"
    THIRD_SECTOR = "THIRD_SECTOR"
    ORGAN_SYSTEM = "ORGAN_SYSTEM"
    TRADE_UNION_ASSOCIATION = "TRADE_UNION_ASSOCIATION"


class TypeEnvironmentEnum(Enum):
    PRODUCTION_SENDING = "PRODUCTION_SENDING"
    HOMOLOGATION_SENDING = "HOMOLOGATION_SENDING"
    PRODUCTION_PROCESSING = "PRODUCTION_PROCESSING"
    HOMOLOGATION_PROCESSING = "HOMOLOGATION_PROCESSING"


class TypeEsocialProcessingStatusEnum(Enum):
    BATCH_AWAITING_PROCESSING = "BATCH_AWAITING_PROCESSING"
    BATCH_PROCESSING_SUCCESSFULLY = "BATCH_PROCESSING_SUCCESSFULLY"
    BATCH_PROCESSING_WITH_WARNINGS = "BATCH_PROCESSING_WITH_WARNINGS"
    ERROR_SERVER_ESOCIAL = "ERROR_SERVER_ESOCIAL"
    INCORRECT_BATCH_ERROR_FILLING = "INCORRECT_BATCH_ERROR_FILLING"
    INCORRECT_BATCH_INVALID_SCHEMA = "INCORRECT_BATCH_INVALID_SCHEMA"
    INCORRECT_BATCH_SCHEMA_VERSION_NOT_ALLOWED = (
        "INCORRECT_BATCH_SCHEMA_VERSION_NOT_ALLOWED"
    )
    INCORRECT_BATCH_CERTIFICATE_ERRROR = "INCORRECT_BATCH_CERTIFICATE_ERRROR"
    INCORRECT_BATCH_NULL_OR_EMPTY_BATCH = "INCORRECT_BATCH_NULL_OR_EMPTY_BATCH"
    EVENT_DOES_NOT_BELONG_TO_THE_GROUP = "EVENT_DOES_NOT_BELONG_TO_THE_GROUP"
    FILL_IN_RULE_NOT_FOLLOWED = "FILL_IN_RULE_NOT_FOLLOWED"
    FAILED_ESOCIAL_SERVERS = "FAILED_ESOCIAL_SERVERS"
    ERROR_IN_SYSTEM_INTEGRATION_RFB = "ERROR_IN_SYSTEM_INTEGRATION_RFB"
    ERROR_IN_SYSTEM_INTEGRATION_CEF = "ERROR_IN_SYSTEM_INTEGRATION_CEF"
    INCORRECT_QUERY_REQUEST_ERROR_FILLING = (
        "INCORRECT_QUERY_REQUEST_ERROR_FILLING"
    )
    INVALID_QUERY_REQUEST_INVALID_SCHEMA = (
        "INVALID_QUERY_REQUEST_INVALID_SCHEMA"
    )
    INCORRECT_QUERY_REQUEST_SCHEMA_VERSION_NOT_ALLOWED = (
        "INCORRECT_QUERY_REQUEST_SCHEMA_VERSION_NOT_ALLOWED"
    )
    INCORRECT_QUERY_REQUEST_CERTIFICATE_ERROR = (
        "INCORRECT_QUERY_REQUEST_CERTIFICATE_ERROR"
    )
    INCORRECT_QUERY_REQUEST_NULL_EMPTY_QUERY = (
        "INCORRECT_QUERY_REQUEST_NULL_EMPTY_QUERY"
    )


class TypeEsocialSendingEnum(Enum):
    EMPLOYER_TAXPAYER_PUBLIC_ORGANS = "EMPLOYER_TAXPAYER_PUBLIC_ORGANS"
    TABLE_ESTABLISMENTS_WORKS_UNITS_PUBLIC_ORGANS = (
        "TABLE_ESTABLISMENTS_WORKS_UNITS_PUBLIC_ORGANS"
    )
    TABLE_HEADINGS = "TABLE_HEADINGS"
    TABLE_CAPACITY_TAX = "TABLE_CAPACITY_TAX"
    TABLE_ADMINISTRATIVE_PROCESS = "TABLE_ADMINISTRATIVE_PROCESS"
    WORKER_REMUNERATION_GENERAL_REGIME = "WORKER_REMUNERATION_GENERAL_REGIME"
    WORKER_REMUNERATION_OWN_REGIME = "WORKER_REMUNERATION_OWN_REGIME"
    REMUNERATION_BENEFIT = "REMUNERATION_BENEFIT"
    PAYMENT_WORK = "PAYMENT_WORK"
    REOPENING_PERIODIC_EVENTS = "REOPENING_PERIODIC_EVENTS"
    CLOSING_PERIODIC_EVENTS = "CLOSING_PERIODIC_EVENTS"
    ADMISSION_WORKER = "ADMISSION_WORKER"
    CHANGE_REGISTRATION_DATA = "CHANGE_REGISTRATION_DATA"
    CHANGE_WORK_CONTRACT = "CHANGE_WORK_CONTRACT"
    WORK_ACCIDENT_COMMUNICATION = "WORK_ACCIDENT_COMMUNICATION"
    WORKER_HEALTH_MONITORING = "WORKER_HEALTH_MONITORING"
    TEMPORARY_REMOVAL_EMPLOYEE = "TEMPORARY_REMOVAL_EMPLOYEE"
    DISPOSITION_ESOCIAL = "DISPOSITION_ESOCIAL"
    ENVIRONMENTAL_WORKING_CONDITIONS = "ENVIRONMENTAL_WORKING_CONDITIONS"
    REVERSE_SHUTDOWN = "REVERSE_SHUTDOWN"
    SHUTDOWN = "SHUTDOWN"
    UNTIED_WORKER_HOME = "UNTIED_WORKER_HOME"
    CHANGE_UNTIED_WORKER_HOME_NO_BOND = "CHANGE_UNTIED_WORKER_HOME_NO_BOND"
    UNTIED_WORKER_FINISH = "UNTIED_WORKER_FINISH"
    BENEFICIARY_REGISTRATION = "BENEFICIARY_REGISTRATION"
    BENEFICIARY_REGISTRATION_CHANGE = "BENEFICIARY_REGISTRATION_CHANGE"
    BENEFIT_REGISTRATION_HOME = "BENEFIT_REGISTRATION_HOME"
    BENEFIT_REGISTRATION_FINISH = "BENEFIT_REGISTRATION_FINISH"
    EVENT_DELETION = "EVENT_DELETION"


class TypeEsocialSendingStatusEnum(Enum):
    BATCH_RECEIVED_SUCCESSFULLY = "BATCH_RECEIVED_SUCCESSFULLY"
    BATCH_RECEIVED_WITH_WARNINGS = "BATCH_RECEIVED_WITH_WARNINGS"
    BATCH_RECEIVED_PREVIOUSLY_STILL_PROCESSING_QUEUE = (
        "BATCH_RECEIVED_PREVIOUSLY_STILL_PROCESSING_QUEUE"
    )
    ERROR_SERVER_ESOCIAL = "ERROR_SERVER_ESOCIAL"
    INCORRECT_BATCH_ERROR_FILLING = "INCORRECT_BATCH_ERROR_FILLING"
    INCORRECT_BATCH_INVALID_SCHEMA = "INCORRECT_BATCH_INVALID_SCHEMA"
    INCORRECT_BATCH_SCHEMA_VERSION_NOT_ALLOWED = (
        "INCORRECT_BATCH_SCHEMA_VERSION_NOT_ALLOWED"
    )
    INCORRECT_BATCH_CERTIFICATE_ERRROR = "INCORRECT_BATCH_CERTIFICATE_ERRROR"
    INCORRECT_BATCH_NULL_OR_EMPTY_BATCH = "INCORRECT_BATCH_NULL_OR_EMPTY_BATCH"
    REJECTED_PLOT_TOTALIZING_IN_PROGRESS = (
        "REJECTED_PLOT_TOTALIZING_IN_PROGRESS"
    )
    REJECTED_BATCH_UNAUTHORIZED_EMPLOYER_SEND = (
        "REJECTED_BATCH_UNAUTHORIZED_EMPLOYER_SEND"
    )


class TypeFileWorkerAccountingEnum(Enum):
    LIQUIDATION = "LIQUIDATION"
    PAYMENT = "PAYMENT"


class TypeIncidenceRubricEnum(Enum):
    PREV = "PREV"
    IRRF = "IRRF"
    FGTS = "FGTS"
    SIND = "SIND"
    CPRP = "CPRP"


class TypeJudicialRequestDetailingColareEnum(Enum):
    PRIMARY_INSTANCE_DECICION = "PRIMARY_INSTANCE_DECICION"
    SECOND_INSTANCE_DECICION = "SECOND_INSTANCE_DECICION"
    SUPERIOR_COURTS = "SUPERIOR_COURTS"
    JUDGMENT_TRANSIT_CERTIFICATE = "JUDGMENT_TRANSIT_CERTIFICATE"
    NARRATIVE_CERTIFICATE = "NARRATIVE_CERTIFICATE"


class TypeLicenseEnum(Enum):
    MEDICAL_LEAVE = "MEDICAL_LEAVE"
    MATERNITY_LEAVE = "MATERNITY_LEAVE"
    PRIVATE_INTEREST_LICENSE = "PRIVATE_INTEREST_LICENSE"
    PATERNITY_LEAVE = "PATERNITY_LEAVE"
    MILITARY_SERVICE_LICENSE = "MILITARY_SERVICE_LICENSE"
    PREMIUM_LICENSE = "PREMIUM_LICENSE"
    POLITICAL_ACTIVITY_LICENSE = "POLITICAL_ACTIVITY_LICENSE"
    LLLNESS_LEAVE_PERSON_FAMILY = "LLLNESS_LEAVE_PERSON_FAMILY"
    POST_GRADUATION_MASTER_DOCTORATE = "POST_GRADUATION_MASTER_DOCTORATE"
    DISGUSTING_LICENSE = "DISGUSTING_LICENSE"
    SUSPENSION_TEMPORARY_CONTRACT_PUBLIC_DISASTER = (
        "SUSPENSION_TEMPORARY_CONTRACT_PUBLIC_DISASTER"
    )
    GALA_LICENSE_MARRIAGE_STABLE_UNION = "GALA_LICENSE_MARRIAGE_STABLE_UNION"
    EXERCISING_OF_A_POSITION_IN_COMMISSION_BY_AN_EFFECTIVE_EMPLOYEE = (
        "EXERCISING_OF_A_POSITION_IN_COMMISSION_BY_AN_EFFECTIVE_EMPLOYEE"
    )
    DISCIPLINARY_MEASURE_REMOVAL_SUSPENSION = (
        "DISCIPLINARY_MEASURE_REMOVAL_SUSPENSION"
    )
    REMOVAL_DUE_TO_IMPRISONMENT = "REMOVAL_DUE_TO_IMPRISONMENT"
    REMOVAL_BY_COURT_ORDER = "REMOVAL_BY_COURT_ORDER"
    REMOVAL_FOR_ABANDONMENT_OF_POSITION_PROC_ONGOING_ADMINISTRATION = (
        "REMOVAL_FOR_ABANDONMENT_OF_POSITION_PROC_ONGOING_ADMINISTRATION"
    )
    OPTION_FOR_THE_REMUNERATION_OF_ANOTHER_ENTITY = (
        "OPTION_FOR_THE_REMUNERATION_OF_ANOTHER_ENTITY"
    )
    LICENSE_BY_CLASS_MANDATE_UNION_ACTIVITY = (
        "LICENSE_BY_CLASS_MANDATE_UNION_ACTIVITY"
    )


class TypeLocationColareEnum(Enum):
    MUNICIPAL_ADMINISTRATIVE_STRUCTURE_UNIT = (
        "MUNICIPAL_ADMINISTRATIVE_STRUCTURE_UNIT"
    )
    BASIC_EDUCATION_UNIT_EARLY_CHILDHOOD_EDUCATION = (
        "BASIC_EDUCATION_UNIT_EARLY_CHILDHOOD_EDUCATION"
    )
    BASIC_EDUCATION_UNIT_ELEMENTARY_SCHOLL = (
        "BASIC_EDUCATION_UNIT_ELEMENTARY_SCHOLL"
    )
    HEALTH_UNIT = "HEALTH_UNIT"


class TypeMaritalEsocialEnum(Enum):
    VALUE_1 = "_1"
    VALUE_2 = "_2"
    VALUE_3 = "_3"
    VALUE_4 = "_4"
    VALUE_5 = "_5"


class TypeMemberEnum(Enum):
    PRESIDENT = "PRESIDENT"
    MENBER = "MENBER"


class TypeModalityChangeEnum(Enum):
    PROMOTION_FROM_FUNDAMENTAL_TO_MEDIUM_LEVEL = (
        "PROMOTION_FROM_FUNDAMENTAL_TO_MEDIUM_LEVEL"
    )
    PROMOTION_FROM_MEDIUM_TO_HIGHER_LEVEL = (
        "PROMOTION_FROM_MEDIUM_TO_HIGHER_LEVEL"
    )
    USE_AFTER_THE_POSITION_IS_EXTINGUISHED = (
        "USE_AFTER_THE_POSITION_IS_EXTINGUISHED"
    )
    READAPTATION = "READAPTATION"
    RENEWAL = "RENEWAL"
    REFRAMING = "REFRAMING"


class TypePensionRegimeEsocialEnum(Enum):
    RGPS = "RGPS"
    RPPS = "RPPS"
    OUTSIDE_PENSION = "OUTSIDE_PENSION"


class TypeProofCharacterColareEnum(Enum):
    MINIMUM_SCORE_FOR_RATING = "MINIMUM_SCORE_FOR_RATING"
    CRITERIA_APPROVAL_FINAL_GRADE = "CRITERIA_APPROVAL_FINAL_GRADE"


class TypeProofColareEnum(Enum):
    OBJECTIVE = "OBJECTIVE"
    DISCURSIVE = "DISCURSIVE"
    TITLE_EVALUATION = "TITLE_EVALUATION"
    PROFESSIONAL_EXPERIENCE = "PROFESSIONAL_EXPERIENCE"
    PHYSICAL_FITNESS_TEST = "PHYSICAL_FITNESS_TEST"
    PSYCHOLOGICAL_ASSESSMENT = "PSYCHOLOGICAL_ASSESSMENT"
    PRACTICAL_PROOF = "PRACTICAL_PROOF"
    SYNDICATION_PAST_LIFE = "SYNDICATION_PAST_LIFE"
    TRAINING_COURSE = "TRAINING_COURSE"


class TypePublicationVehicleColareEnum(Enum):
    DOU = "DOU"
    DOE = "DOE"
    DOM = "DOM"
    JOURNAL_GOIANIAA_SSOCIATION_MUNICIPALITIES = (
        "JOURNAL_GOIANIAaSSOCIATION_MUNICIPALITIES"
    )
    CITY_HALL_SCOREBOARD_MANAGEMENT_UNIT = (
        "CITY_HALL_SCOREBOARD_MANAGEMENT_UNIT"
    )
    OFFICIAL_WEBSITE_MUNICIPALITY = "OFFICIAL_WEBSITE_MUNICIPALITY"
    POPULAR_NEWSPAPER = "POPULAR_NEWSPAPER"
    DAILY_MORNING_NEWSPAPER = "DAILY_MORNING_NEWSPAPER"
    NEWSPAPER_TODAY = "NEWSPAPER_TODAY"
    OTHER_DESCRIBE_PUBLICATION_VEHICLE = "OTHER_DESCRIBE_PUBLICATION_VEHICLE"


class TypeRaceEsocialEnum(Enum):
    WHITE = "WHITE"
    BLACK = "BLACK"
    BROWN = "BROWN"
    YELLOW = "YELLOW"
    INDIGENOUS = "INDIGENOUS"
    NOT_INFORMED = "NOT_INFORMED"


class TypeRectificationColareEnum(Enum):
    UPDATE = "UPDATE"
    CORRECTION = "CORRECTION"


class TypeRegisterDispositionEnum(Enum):
    INITIAL = "INITIAL"
    FINAL = "FINAL"


class TypeRemovalEsocialEnum(Enum):
    VALUE_01 = "_01"
    VALUE_03 = "_03"
    VALUE_05 = "_05"
    VALUE_06 = "_06"
    VALUE_07 = "_07"
    VALUE_10 = "_10"
    VALUE_11 = "_11"
    VALUE_12 = "_12"
    VALUE_13 = "_13"
    VALUE_15 = "_15"
    VALUE_16 = "_16"
    VALUE_17 = "_17"
    VALUE_18 = "_18"
    VALUE_19 = "_19"
    VALUE_20 = "_20"
    VALUE_21 = "_21"
    VALUE_22 = "_22"
    VALUE_24 = "_24"
    VALUE_25 = "_25"
    VALUE_26 = "_26"
    VALUE_27 = "_27"
    VALUE_28 = "_28"
    VALUE_29 = "_29"
    VALUE_31 = "_31"
    VALUE_34 = "_34"
    VALUE_35 = "_35"
    VALUE_36 = "_36"
    VALUE_37 = "_37"
    VALUE_38 = "_38"
    VALUE_39 = "_39"
    VALUE_40 = "_40"


class TypeRemovalSefipenum(Enum):
    S = "S"
    R = "R"


class TypeRemunerationWorkerEnum(Enum):
    GENERAL_REGIME = "GENERAL_REGIME"
    OWN_REGIME = "OWN_REGIME"
    BENEFIT = "BENEFIT"


class TypeReverseShutdownEnum(Enum):
    VALUE_1 = "_1"
    VALUE_2 = "_2"
    VALUE_3 = "_3"
    VALUE_4 = "_4"
    VALUE_5 = "_5"
    VALUE_9 = "_9"


class TypeRubricEnum(Enum):
    MATURITY_BENEFIT_PENSION = "MATURITY_BENEFIT_PENSION"
    DISCOUNT = "DISCOUNT"
    INFORMATIVE = "INFORMATIVE"
    INFORMATIVE_DEDUCTIVE = "INFORMATIVE_DEDUCTIVE"


class TypeSendingColareEnum(Enum):
    INITIAL = "INITIAL"
    UPDATE = "UPDATE"
    CORRECTION = "CORRECTION"


class TypeSendingEnum(Enum):
    CREATE = "CREATE"
    UPDATE = "UPDATE"
    DELETE = "DELETE"


class TypeSocialSecurityColareEnum(Enum):
    RPPS = "RPPS"
    RGPS = "RGPS"
    FREE = "FREE"


class TypeTrafficAccidentEnum(Enum):
    HIT_AND_RUN = "HIT_AND_RUN"
    COLLISION = "COLLISION"
    OTHERS = "OTHERS"


class TypeWorkRegimeEsocialEnum(Enum):
    CLT = "CLT"
    STATUTORY = "STATUTORY"


class UnionTypeEnum(Enum):
    ASSOCIATIVE = "ASSOCIATIVE"
    ASSISTANCE = "ASSISTANCE"
    UNION = "UNION"
    CONFEREDERATIVE = "CONFEREDERATIVE"


@dataclass
class VerificarStatusIntegracao:
    class Meta:
        name = "verificarStatusIntegracao"
        namespace = "http://ws.integration.pm.bsit.com.br/"


@dataclass
class VerificarStatusIntegracaoResponse:
    class Meta:
        name = "verificarStatusIntegracaoResponse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    statusOnline: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


class WeeklyMonthlyTypeEnum(Enum):
    S = "S"
    M = "M"


@dataclass
class Activity(PublicManagement):
    class Meta:
        name = "activity"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueDeduction: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ActivityBranch(PublicManagement):
    class Meta:
        name = "activityBranch"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ActivityCarriedOut(PublicManagement):
    class Meta:
        name = "activityCarriedOut"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AdjustmentType(PublicManagement):
    class Meta:
        name = "adjustmentType"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    optionalFinalTerm: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AdmissionType(PublicManagement):
    class Meta:
        name = "admissionType"

    admissionTypeColare: Optional[AdmissionTypeColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    admissionTypeESocial: Optional[AdmissionTypeEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeRais: Optional[AdmissionTypeRaisEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    courtCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    functionalStatus: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isEffectiveOrigin: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isNotRequiredPension: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isSendTcm: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isThirtheenByAdmissionDate: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    manadBondType: Optional[ManadBondTypeEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    notConsiderProgression: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    provisionTypeESocial: Optional[ProvisionTypeEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Bank(PublicManagement):
    class Meta:
        name = "bank"

    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    number: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class BenefitType(PublicManagement):
    class Meta:
        name = "benefitType"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    optionalFinalTerm: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class BiddingModality(PublicManagement):
    class Meta:
        name = "biddingModality"

    biddingModalityEnum: Optional[BiddingModalityEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeBiddingCourt: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enableAccountant: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enableBidding: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class BiddingStatus(PublicManagement):
    class Meta:
        name = "biddingStatus"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class BrandVehicle(PublicManagement):
    class Meta:
        name = "brandVehicle"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CapacityType(PublicManagement):
    class Meta:
        name = "capacityType"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CategoryCnh(PublicManagement):
    class Meta:
        name = "categoryCNH"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CharacteristicsOfEstablishment(PublicManagement):
    class Meta:
        name = "characteristicsOfEstablishment"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Cid(PublicManagement):
    class Meta:
        name = "cid"

    codeCid: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enable: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Cnae(PublicManagement):
    class Meta:
        name = "cnae"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    descriptionAndName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Color(PublicManagement):
    class Meta:
        name = "color"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CompanyIntegrationDto(PublicManagementDto):
    class Meta:
        name = "companyIntegrationDTO"

    adeptEmitDESIF: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    allowRetention: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    allowTaxOutCity: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    allowedEventualRetentionISS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    blockedDebit: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    byPassREST: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cancelDirect: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    collectISSOptionSimple: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    declareREST: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    declareRPS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    desifLiberationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    disregardGuideREST: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dmsLiberationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    emitDMS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    emitNFSE: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabledAllowedNFSE: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    generateDebitEstimate: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    incentiveTax: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialInvoiceNumber: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionFinancial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    issExemptedAllowed: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    issExemptedPartnerAllowed: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    issImmuneAllowed: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lastDMSNumber: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    municipalRegistration: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nfseLiberationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    pendentDocument: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    permitBlock: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerOptional: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    requestAIDF: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    restLiberationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    restrictsDeduction: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    restrictsDiscountInconditional: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selfTaker: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    simplifiedStatement: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    substituteTax: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    takerOptional: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    tollSquare: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueAliquotSpecial: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueEstimate: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ContractGoal(PublicManagement):
    class Meta:
        name = "contractGoal"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ContractHumanResourcesType(PublicManagement):
    class Meta:
        name = "contractHumanResourcesType"

    admissionTypeESocial: Optional[AdmissionTypeEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Cowntry(PublicManagement):
    class Meta:
        name = "cowntry"

    bacenCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeEsocial: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeIBGE: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CredentialsDto(PublicManagement):
    class Meta:
        name = "credentialsDTO"

    cryptText: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    password: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    passwordSendToUser: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    privateKey: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    publicKey: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    userName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class DebitDetailInformationDto(PublicManagementDto):
    class Meta:
        name = "debitDetailInformationDTO"

    codeDebit: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    expirateDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDebit: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reference: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    referenceNotLaunch: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    statusDebitDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    tributeDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueDebit: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class DepartmentType(PublicManagement):
    class Meta:
        name = "departmentType"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    topTypeDepartment: Optional["DepartmentType"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class DesifGroup(PublicManagement):
    class Meta:
        name = "desifGroup"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class DetailingNatureObject(PublicManagement):
    class Meta:
        name = "detailingNatureObject"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reference: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EndowmentCommitmentSheet(PublicManagement):
    class Meta:
        name = "endowmentCommitmentSheet"

    active: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EsocialXml(PublicManagement):
    class Meta:
        name = "esocialXML"

    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    xml: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )


@dataclass
class EventCalculationType(PublicManagement):
    class Meta:
        name = "eventCalculationType"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EventStatus(PublicManagement):
    class Meta:
        name = "eventStatus"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class File(PublicManagement):
    class Meta:
        name = "file"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    archive: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    content: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    fileType: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class FileColareGeneric(PublicManagement):
    class Meta:
        name = "fileColareGeneric"

    content: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    fileName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileType: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentPDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class FluidType(PublicManagement):
    class Meta:
        name = "fluidType"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class GroupOffice(PublicManagement):
    class Meta:
        name = "groupOffice"

    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class GroupPayment(PublicManagement):
    class Meta:
        name = "groupPayment"

    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class HealthSurveillanceGroup(PublicManagement):
    class Meta:
        name = "healthSurveillanceGroup"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class InstitutionUnitType(PublicManagement):
    class Meta:
        name = "institutionUnitType"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class LawEvent(PublicManagement):
    class Meta:
        name = "lawEvent"

    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class LotEvent(PublicManagement):
    class Meta:
        name = "lotEvent"

    applicationVersionReceiving: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateHourReception: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendProtoco: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    statusSend: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Element",
            "namespace": "",
        },
    )
    typeEnvironment: Optional[TypeEnvironmentEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ManagerFunction(PublicManagement):
    class Meta:
        name = "managerFunction"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class MeasurementUnitTermDelivery(PublicManagement):
    class Meta:
        name = "measurementUnitTermDelivery"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Nationality(PublicManagement):
    class Meta:
        name = "nationality"

    codeEsocial: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeRAIS: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class NatureJuridical(PublicManagement):
    class Meta:
        name = "natureJuridical"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class NatureObject(PublicManagement):
    class Meta:
        name = "natureObject"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    substantiation: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class NatureProcedure(PublicManagement):
    class Meta:
        name = "natureProcedure"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class NotaryAssignmentType(PublicManagement):
    class Meta:
        name = "notaryAssignmentType"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Occupation(PublicManagement):
    class Meta:
        name = "occupation"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class OperationTime(PublicManagement):
    class Meta:
        name = "operationTime"

    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class OrganType(PublicManagement):
    class Meta:
        name = "organType"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PayrollPaymentType(PublicManagement):
    class Meta:
        name = "payrollPaymentType"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PcaspAccount(PublicManagement):
    class Meta:
        name = "pcaspAccount"

    account: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    function: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    kind: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    level: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nature: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    pcaspTopAccount: Optional["PcaspAccount"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    requiredOrOptional: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    superavitIndicator: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    system: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonFingerPrint(PublicManagement):
    class Meta:
        name = "personFingerPrint"

    fingerLeftHandFive: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fingerLeftHandFour: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fingerLeftHandOne: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fingerLeftHandThree: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fingerLeftHandTwo: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fingerRightHandFive: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fingerRightHandFour: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fingerRightHandOne: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fingerRightHandThree: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fingerRightHandTwo: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonIntegrationDto(PublicManagement):
    class Meta:
        name = "personIntegrationDTO"

    cnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cpf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    declareInvoice: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    emitNFSEEventual: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ignorePersonDeiss: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ignoreTaker: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nationalSimpleOptingDEISS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    publicOrgan: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ruralProducer: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    tollSquare: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonPhone(PublicManagement):
    class Meta:
        name = "personPhone"

    altered: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    contactName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isPrincipal: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    phone: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalLegislation(PublicManagement):
    class Meta:
        name = "personalLegislation"

    codeColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    datePosted: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    endTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    federatedEntityType: Optional[FederatedEntityTypeColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    financialEffectStartDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    legislationApplicableManagementUnits: List[
        "LegislationApplicableManagementUnit"
    ] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    legislationRegulatoryStandards: List["LegislationRegulatoryStandard"] = (
        field(
            default_factory=list,
            metadata={
                "type": "Element",
                "namespace": "",
                "nillable": True,
            },
        )
    )
    legislationStandardLegislations: List["LegislationStandardLegislation"] = (
        field(
            default_factory=list,
            metadata={
                "type": "Element",
                "namespace": "",
                "nillable": True,
            },
        )
    )
    listLegislationStandardAffairs: List["LegislationStandardAffairs"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    personalLegislationSending: Optional["PersonalLegislationSending"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    presentRegulatoryStandard: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    standardApplicableAll: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    standardDetail: Optional[StandardDetailColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    standardMenu: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    standardNumber: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    standardType: Optional[StandardTypeColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    standardYear: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    standardYearInt: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PositionSalarySquare(PublicManagement):
    class Meta:
        name = "positionSalarySquare"

    acronym: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PositionType(PublicManagement):
    class Meta:
        name = "positionType"

    courtCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    linkBudget: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    linkPosition: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PostNature(PublicManagement):
    class Meta:
        name = "postNature"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Profession(PublicManagement):
    class Meta:
        name = "profession"

    counselDocument: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enable: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProtocolProcess(PublicManagement):
    class Meta:
        name = "protocolProcess"


@dataclass
class ProviderHumanResourcesPayrollType(PublicManagement):
    class Meta:
        name = "providerHumanResourcesPayrollType"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isAdjustType: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rppsExempt: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProviderHumanResourcesType(PublicManagement):
    class Meta:
        name = "providerHumanResourcesType"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    percentBaseINSS: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    percentBaseIRRF: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    percentINSS: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Provision(PublicManagement):
    class Meta:
        name = "provision"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class RegimeExecutionWork(PublicManagement):
    class Meta:
        name = "regimeExecutionWork"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Schooling(PublicManagement):
    class Meta:
        name = "schooling"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeEsocial: Optional[SchoolingEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    schoolingColare: Optional[SchoolingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    schoolingRais: Optional[SchoolingRaisEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Service(PublicManagement):
    class Meta:
        name = "service"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SizeCompany(PublicManagement):
    class Meta:
        name = "sizeCompany"

    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SourceRevenueCodificationType(PublicManagement):
    class Meta:
        name = "sourceRevenueCodificationType"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class StatusBuildingUser(PublicManagement):
    class Meta:
        name = "statusBuildingUser"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enableUser: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class StatusCompany(PublicManagement):
    class Meta:
        name = "statusCompany"

    blockOperations: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    priority: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class StatusPayrollMovement(PublicManagement):
    class Meta:
        name = "statusPayrollMovement"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TaxIncidenceRubric(PublicManagement):
    class Meta:
        name = "taxIncidenceRubric"

    active: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeIncidenceRubric: Optional[TypeIncidenceRubricEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TaxType(PublicManagement):
    class Meta:
        name = "taxType"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeAccountingEvent(PublicManagement):
    class Meta:
        name = "typeAccountingEvent"

    codeCourt: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    earningDiscount: Optional[EarningDiscountEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeActDesignation(PublicManagement):
    class Meta:
        name = "typeActDesignation"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeBankAccount(PublicManagement):
    class Meta:
        name = "typeBankAccount"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    useOperationCode: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeBaseCourtOfLaw(PublicManagement):
    class Meta:
        name = "typeBaseCourtOfLaw"

    baseValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeCourt: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    minimumTime: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeAtuarial: Optional[TypeAtuarialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueCeiling: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeBeneficiaryEmployee(PublicManagement):
    class Meta:
        name = "typeBeneficiaryEmployee"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeBidding(PublicManagement):
    class Meta:
        name = "typeBidding"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeBlood(PublicManagement):
    class Meta:
        name = "typeBlood"

    descriptionBlood: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enable: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    factorRH: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeBondEvent(PublicManagement):
    class Meta:
        name = "typeBondEvent"

    categoryColareColare: Optional[RemunerationCategoryColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeCourt: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    discountCategoryColares: Optional[DiscountsCategoryColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    earningDiscount: Optional[EarningDiscountEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    excludeFromActuarial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeBondRais(PublicManagement):
    class Meta:
        name = "typeBondRAIS"

    codeRAIS: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeCalculationEvent(PublicManagement):
    class Meta:
        name = "typeCalculationEvent"

    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    identifierCalculation: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeCategorySefip(PublicManagement):
    class Meta:
        name = "typeCategorySEFIP"

    codeSEFIP: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeContest(PublicManagement):
    class Meta:
        name = "typeContest"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeDeficiency(PublicManagement):
    class Meta:
        name = "typeDeficiency"

    codeColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeRAIS: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deficiencyType: Optional[DeficiencyTypeEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    resourcesNeededEvaluation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeEventTermination(PublicManagement):
    class Meta:
        name = "typeEventTermination"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeExoneration(PublicManagement):
    class Meta:
        name = "typeExoneration"

    codeCourt: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reasonShutdownBenefitESocial: Optional[
        ReasonShutdownBenefitEsocialEnum
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reasonShutdownESocial: Optional[ReasonShutdownEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeMaritalStatus(PublicManagement):
    class Meta:
        name = "typeMaritalStatus"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeEsocial: Optional[TypeMaritalEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeOccurrenceFunctional(PublicManagement):
    class Meta:
        name = "typeOccurrenceFunctional"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypePerson(PublicManagement):
    class Meta:
        name = "typePerson"

    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypePhone(PublicManagement):
    class Meta:
        name = "typePhone"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypePositionAccumulation(PublicManagement):
    class Meta:
        name = "typePositionAccumulation"

    codeCourt: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeRace(PublicManagement):
    class Meta:
        name = "typeRace"

    codeColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeEsocial: Optional[TypeRaceEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeRAIS: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeRecordCompany(PublicManagement):
    class Meta:
        name = "typeRecordCompany"

    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeRelationship(PublicManagement):
    class Meta:
        name = "typeRelationship"

    codeCourt: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dependentHealthPlan: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dependentType: Optional[DependentTypeColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dependentTypeESocial: Optional[DependentTypeEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shutdownAgeFamilySalary: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shutdownAgeIRRF: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeRemovalSefip(PublicManagement):
    class Meta:
        name = "typeRemovalSEFIP"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    type_value: Optional[TypeRemovalSefipenum] = field(
        default=None,
        metadata={
            "name": "type",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeSituationEmployee(PublicManagement):
    class Meta:
        name = "typeSituationEmployee"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeStreet(PublicManagement):
    class Meta:
        name = "typeStreet"

    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class UnionType(PublicManagement):
    class Meta:
        name = "union"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class User(PublicManagement):
    class Meta:
        name = "user"

    accessCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    certificateName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cpf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cpfFormated: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    device: Optional[DeviceEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    email: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fingerPrint: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    firstName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    graduationTraffic: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    hourEntry: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    hourOut: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isEnableTrace: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isExternalUser: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isMultipleModule: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isOmbudsmandEnabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isPayBillsEnabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isPensionEnabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isTrafficEnabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isUseAccessCode: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isUseByEmployeeAuthentication: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isVersionUpdate: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lastLogin: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    loginTime: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    matriculationTraffic: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    mobileString: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    phoneNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    photo: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sessionTime: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    token: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    tokenFingerPrint: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeDownload: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    useByProviderAuthentication: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    userDepartments: List["UserDepartment"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    userTeachingUnits: List["UserTeachingUnit"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )


@dataclass
class UserNfsedto(PublicManagement):
    class Meta:
        name = "userNFSEDTO"

    alternativeLogin: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    companyCnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    companyName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    confirmPassword: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cpf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateBirth: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    email: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    firstName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fromIntegration: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    municipalRegistration: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    password: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    phoneNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sex: Optional[SexEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    urlAuthentication: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class UserNfsestatus(PublicManagement):
    class Meta:
        name = "userNFSEStatus"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class VehicleType(PublicManagement):
    class Meta:
        name = "vehicleType"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Workload(PublicManagement):
    class Meta:
        name = "workload"

    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    weeklyMonthlyType: Optional[WeeklyMonthlyTypeEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    workloadAmount: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AccountPlan(PublicManagement):
    class Meta:
        name = "accountPlan"

    balanceType: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    level: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    organType: Optional[OrganType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    year: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Agency(PublicManagement):
    class Meta:
        name = "agency"

    bank: Optional[Bank] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    digit: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    select: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AuthorizingLaw(PublicManagement):
    class Meta:
        name = "authorizingLaw"

    file: Optional[File] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lawNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    publicationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    summary: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class BuildingUser(PublicManagement):
    class Meta:
        name = "buildingUser"

    bithDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    confirmPassword: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cpf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    email: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enable: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    password: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    phone: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    professionalRecordFile: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    profissionalRecord: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    recodeFileName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    statusBuildingUser: Optional[StatusBuildingUser] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    technicalResponsible: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CourtOrderDocument(FileColareGeneric):
    class Meta:
        name = "courtOrderDocument"

    employeePosition: Optional["EmployeePosition"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeJudicialRequestDetailing: Optional[
        TypeJudicialRequestDetailingColareEnum
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CredenciarUsuarioDeiss:
    class Meta:
        name = "credenciarUsuarioDEISS"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    arg0: Optional[UserNfsedto] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    arg1: Optional[CredentialsDto] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CredenciarUsuarioDeissresponse:
    class Meta:
        name = "credenciarUsuarioDEISSResponse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    CredenciarUsuarioDEISSResposta: Optional[UserNfsedto] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CredenciarUsuarioNfse:
    class Meta:
        name = "credenciarUsuarioNfse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    arg0: Optional[UserNfsedto] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    arg1: Optional[CredentialsDto] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CredenciarUsuarioNfseResponse:
    class Meta:
        name = "credenciarUsuarioNfseResponse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    CredenciarUsuarioNfseResposta: Optional[UserNfsedto] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Department(PublicManagement):
    class Meta:
        name = "department"

    allowsArchiving: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    capacityCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeInep: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    departmentType: Optional[DepartmentType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    hierarchy: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    informationUnhealthy: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionUnitDepartments: List["InstitutionUnitDepartment"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    isOmbudsman: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isPatrimony: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isRequiredIdentificationToProtocolProcess: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isUnhealthy: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    levelFive: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    levelFour: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    levelThree: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    levelTwo: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    manager: Optional["Manager"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    module: Optional[GlobalModuleEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    moduleFT: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    moduleHR: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    modulePT: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reportName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    timeToAnalisys: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    topDepartment: Optional["Department"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeLocation: Optional[TypeLocationColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class FuelType(PublicManagement):
    class Meta:
        name = "fuelType"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeTCM: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fluidType: Optional[FluidType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class FunctionService(PublicManagement):
    class Meta:
        name = "functionService"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    occupation: Optional[Occupation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ItemService(PublicManagement):
    class Meta:
        name = "itemService"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    doesNotCalculate: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    doesNotCalculateINSS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    estimateLimitValueByYear: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    issRetain: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    itemServiceFormated: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rejectTaxationOutsideMunicipio: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    service: Optional[Service] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    simpleAttachmentEnum: Optional[SimpleAttachmentEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    simpleAttachmentREnum: Optional[SimpleAttachmentEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueAliquot: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueDeduction: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueIncentive: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueReduction: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class LegislationRegulatoryStandard(PublicManagement):
    class Meta:
        name = "legislationRegulatoryStandard"

    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personLegislationRegulatory: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislation: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class LegislationStandardAffairs(PublicManagement):
    class Meta:
        name = "legislationStandardAffairs"

    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislation: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    standardIssue: Optional[StandardIssueColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class LegislationStandardLegislation(PublicManagement):
    class Meta:
        name = "legislationStandardLegislation"

    content: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileType: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentPDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislation: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeDocument: Optional[TypeDocumentColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class OpcoesDeEmissaoNfsecontribuinte:
    class Meta:
        name = "opcoesDeEmissaoNFSEContribuinte"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    arg0: Optional[PersonIntegrationDto] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    arg1: Optional[CredentialsDto] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class OpcoesDeEmissaoNfsecontribuinteResponse:
    class Meta:
        name = "opcoesDeEmissaoNFSEContribuinteResponse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    OpcoesDeEmissaoNFSEContribuinteResposta: Optional[PersonIntegrationDto] = (
        field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "",
            },
        )
    )


@dataclass
class OpcoesDeEmissaoNfseempresa:
    class Meta:
        name = "opcoesDeEmissaoNFSEEmpresa"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    arg0: Optional[CompanyIntegrationDto] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    arg1: Optional[CredentialsDto] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class OpcoesDeEmissaoNfseempresaResponse:
    class Meta:
        name = "opcoesDeEmissaoNFSEEmpresaResponse"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    OpcoesDeEmissaoNFSEEmpresaResposta: Optional[CompanyIntegrationDto] = (
        field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "",
            },
        )
    )


@dataclass
class PayrollType(PublicManagement):
    class Meta:
        name = "payrollType"

    acronym: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    discountMissing: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ignorePlight: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isAdjustType: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isSendTcm: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    mediaLicensePremium: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    mediaThirteenth: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    mediumVacation: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    notSendESocial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    payrollPaymentType: Optional[PayrollPaymentType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rppsExempt: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PcaspAccountUtilizated(PublicManagement):
    class Meta:
        name = "pcaspAccountUtilizated"

    account: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    disabledDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabledDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    integration: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    invertBalance: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    kind: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    level: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nature: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    pcaspAccount: Optional[PcaspAccount] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    pcaspTopAccount: Optional["PcaspAccountUtilizated"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    quantitityOfDigitLevel: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    superavitIndicator: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    system: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    title: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SourceRevenueCodification(PublicManagement):
    class Meta:
        name = "sourceRevenueCodification"

    autocompleteDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeIntegration: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalEffectiveDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialEffectiveDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sourceRevenueCodificationType: Optional[SourceRevenueCodificationType] = (
        field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "",
            },
        )
    )


@dataclass
class State(PublicManagement):
    class Meta:
        name = "state"

    acronym: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeIbge: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cowntry: Optional[Cowntry] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SubGroupOffice(PublicManagement):
    class Meta:
        name = "subGroupOffice"

    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    groupOffice: Optional[GroupOffice] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SubtypeVehicle(PublicManagement):
    class Meta:
        name = "subtypeVehicle"

    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    vehicleType: Optional[VehicleType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class City(PublicManagement):
    class Meta:
        name = "city"

    cityUrl: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    countyCode: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    courtyCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    firstPostalCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fiscalRegion: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ibgeCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lastPostalCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sinpasCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    state: Optional[State] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    tomCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    tomCreationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    tomInstalationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    webSite: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CompanyVehicle(PublicManagement):
    class Meta:
        name = "companyVehicle"

    brandVehicle: Optional[BrandVehicle] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    chassis: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    color: Optional[Color] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateEmissionIPVA: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateExpiryIPVA: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    datePaymentIPVA: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    effectiveDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fuelType: Optional[FuelType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idCompany: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    km: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    model: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    plaque: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reference: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    renavam: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    series: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    subTypeVehicle: Optional[SubtypeVehicle] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    year: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Element(PublicManagement):
    class Meta:
        name = "element"

    accountPlanCity: Optional[AccountPlan] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    accountPlanCounterPart: Optional[AccountPlan] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    accountPlanForesight: Optional[AccountPlan] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    accountPlanPaymentForecast: Optional[AccountPlan] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    accountPlanRestPayable: Optional[AccountPlan] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    autocompleteDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeElementIntegration: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    informations: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isUsedInConsolidatedDebt: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isUsedInDaily: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isUsedInPatrimony: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isUsedInPublicBuilding: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reducedCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    subElements: List["SubElement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    year: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class UserDepartment(PublicManagement):
    class Meta:
        name = "userDepartment"

    deactivateDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    department: Optional[Department] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enable: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    user: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AdvisoryCompany(PublicManagement):
    class Meta:
        name = "advisoryCompany"

    address: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    city: Optional[City] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    email: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    neighboorhod: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    phone: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    postalCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class District(PublicManagement):
    class Meta:
        name = "district"

    city: Optional[City] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ExternalPosition(PublicManagement):
    class Meta:
        name = "externalPosition"

    accumulationSphere: Optional[AccumulationSphereColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    city: Optional[City] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeInstitution: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codePosition: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nameDepartment: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nameInstitution: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    namePosition: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Institution(PublicManagement):
    class Meta:
        name = "institution"

    address: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    addressComplement: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    allowHealthRequirements: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    allowRetainIss: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cei: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    city: Optional[City] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cnaeCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    customName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ddd: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    defaultInstitution: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    disablePortal: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    email: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialTableEstablishments: Optional["EsocialTableEstablishments"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    existFileContent: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    fapPercentage: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    formatedName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    formmatedAddress: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idBranchInstitution: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ignoreTCEMA: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isPprocessFileByDescending: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    issManagementParagraphOne: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    issManagementParagraphThree: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    issManagementParagraphTwo: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    issManagementTitle: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    juridicNature: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lastNumberProccess: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lotEvent: Optional[LotEvent] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    managementUnit: Optional["Institution"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    managerUnitCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    neighborhood: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    notificationUsers: List[User] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    number: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observationHomeScreenNFSE: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    phoneNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    postalCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    prefix: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    prefixGraph: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ratPercentage: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reportName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    responsibleManagementUnitType: Optional[
        ResponsibleManagementUnitTypeEnum
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    siafi: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    tcmCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    webSite: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SubElement(PublicManagement):
    class Meta:
        name = "subElement"

    accountAccounting: Optional[PcaspAccountUtilizated] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    accountCurrentLiabilities: Optional[PcaspAccountUtilizated] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeSubElementIntegration: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    element: Optional[Element] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    elementGroup: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    endYear: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialYear: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Bidding(PublicManagement):
    class Meta:
        name = "bidding"

    adjudicationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    administrativeProcessCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    biddingModality: Optional[BiddingModality] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    biddingObject: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    biddingStatus: Optional[BiddingStatus] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    biddingYear: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    closingSession: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    colareBiddingNumber: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    colareStatus: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    continuousService: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    contractGoal: Optional[ContractGoal] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    criteriaAcceptance: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deliveryTime: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    destinedMEEPP: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    detailingNatureObject: Optional[DetailingNatureObject] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    extensionClause: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalizationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    formattedCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    homologationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutions: List[Institution] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    judgmentDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lotProcess: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    measurementUnitTermDelivery: Optional[MeasurementUnitTermDelivery] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    minuteOccurrences: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    minuteQualification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    minuteResources: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    minuteTitle: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    natureObject: Optional[NatureObject] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    natureObjectDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    natureProcedure: Optional[NatureProcedure] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    noticeDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    number: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    numberInvite: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    numberModalityExecution: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observations: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    openningDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    paymentForm: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    percentLimitMEEPP: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    portal: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    preamble: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    premiumConcourse: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    protocolProcess: Optional[ProtocolProcess] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    publicationDateDO: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    realizationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    regimeExecutionWork: Optional[RegimeExecutionWork] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    registeringRecordAttendanceJudgment: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    renouncesTermAppeal: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    subcontractingMEEPP: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    tieBreakerMEEPP: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeBidding: Optional[TypeBidding] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    userManagerBidding: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    userManagerBiddingOptional: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    value: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    yearAdministrativeProcess: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class HumanResourcesBase(PublicManagement):
    class Meta:
        name = "humanResourcesBase"

    institutionToFilter: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class InstitutionUnit(PublicManagement):
    class Meta:
        name = "institutionUnit"

    autocompleteDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalPeriod: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    formatedName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialPeriod: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionUnitType: Optional[InstitutionUnitType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isFinancial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reportName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    year: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class LegislationApplicableManagementUnit(PublicManagement):
    class Meta:
        name = "legislationApplicableManagementUnit"

    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislation: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Neighborhood(PublicManagement):
    class Meta:
        name = "neighborhood"

    city: Optional[City] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    district: Optional[District] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    expansionArea: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    obervation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reductionIPTUEdification: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reductionIPTUGeneral: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reductionIPTULot: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PayrollMovementCalculationExecution(PublicManagement):
    class Meta:
        name = "payrollMovementCalculationExecution"

    admissionType: Optional[AdmissionType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    calculateUser: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    contractHumanResourcesType: Optional[ContractHumanResourcesType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalCalculationTime: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    informations: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialCalculationTime: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isWithoutLog: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    payrollType: Optional[PayrollType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reference: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    resultExecution: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    resultExecutionDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    totalGeneral: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    totalProcess: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalColareReceipt:
    class Meta:
        name = "personalColareReceipt"

    codeIdentifier: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeTypeRectification: Optional[TypeRectificationColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    contentHomologation: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    creationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    creationUser: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateReceipt: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    descriptionError: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    endPointPersonalColare: Optional[EndPointPersonalColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    exclusionDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    exclusionUser: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    identifier: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    identifierName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialsAccountability: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialsLayout: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    json: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    month: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    payrollMovementReference: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    receiptCourtId: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    receiptNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    representationId: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    statusReceiptColareEnum: Optional[StatusReceiptColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    updateDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    updateUser: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    year: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Contest(PublicManagement):
    class Meta:
        name = "contest"

    articleBudgetGuidelines: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    bidding: Optional[Bidding] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    budgetaryGuidelinesLaw: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    candidateCpf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeBidding: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    contentExaminingBoard: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    contentFiscalResponsibilityCertificate: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    contentOrganizingCommittee: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    contentRequest: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    contestDetailings: List["ContestDetailing"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    contestDocuments: List["ContestDocument"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    contestExceptionalPublicInterests: List[
        "ContestExceptionalPublicInterest"
    ] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    contestPersonalLegislations: List["ContestPersonalLegislation"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    contestPositionDetailings: List["ContestPositionDetailing"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    contestPostingDetails: List["ContestPostingDetail"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    dateHomologation: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    descriptionRequest: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    examiningBoardType: Optional[ExaminingBoardTypeEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    expirationContractDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    expirationContractNoticeItemNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    expirationDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    expirationNoticeItemNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    expirationType: Optional[ExpirationTypeColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    expirationTypeContract: Optional[ExpirationTypeContractColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    expiryContractDate: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    expiryDate: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileNameExaminingBoard: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileNameFiscalResponsibilityCertificate: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileNameOrganizingCommittee: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileNameRequest: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileTypeExaminingBoard: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileTypeFiscalResponsibilityCertificate: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileTypeOrganizingCommittee: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileTypeRequest: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentExaminingBoardPDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentFiscalResponsibilityCertificatePDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentOrganizingCommitteePDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentRequestPDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isExtendable: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isGeneratedSending: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    numberNotice: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    numberProcess: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    organizingCommitteeMembers: List["OrganizingCommitteeMember"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    personalContest: Optional["PersonalContest"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalHomologation: Optional["PersonalHomologation"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    realizationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    registrationDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    registrationEndDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    registrationNoticeItemNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    registrationStartDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selectionNoticeType: Optional[SelectionNoticeTypeEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeContest: Optional[TypeContest] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    vacancyQuantity: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    yearNotice: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    yearProcess: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class InstitutionUnitDepartment(PublicManagement):
    class Meta:
        name = "institutionUnitDepartment"

    department: Optional[Department] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionUnit: Optional[InstitutionUnit] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    module: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sourceRevenueCodification: Optional[SourceRevenueCodification] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonAddress(PublicManagement):
    class Meta:
        name = "personAddress"

    address: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    addressComplete: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    addressCorrespondence: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    block: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    city: Optional[City] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    complement: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    countryResidence: Optional[Cowntry] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lot: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    neighborhood: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    neighborhoodObj: Optional[Neighborhood] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    number: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ownResidence: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    postalCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    purchasedWithResource: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    registerAddress: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    residesAbroad: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalLegislationSending(PublicManagement):
    class Meta:
        name = "personalLegislationSending"

    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalColareReceipt: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislation: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rectification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Street(PublicManagement):
    class Meta:
        name = "street"

    CEP: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    neighborhood: Optional[Neighborhood] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    streetWithType: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeStreet: Optional[TypeStreet] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ContestDetailing(PublicManagement):
    class Meta:
        name = "contestDetailing"

    contest: Optional[Contest] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    noticeItemNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeDetailing: Optional[TypeDetailingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ContestDocument(FileColareGeneric):
    class Meta:
        name = "contestDocument"

    contest: Optional[Contest] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeDocument: Optional[TypeDocumentContestColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ContestExceptionalPublicInterest(FileColareGeneric):
    class Meta:
        name = "contestExceptionalPublicInterest"

    contest: Optional[Contest] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislation: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ContestPersonalLegislation(PublicManagement):
    class Meta:
        name = "contestPersonalLegislation"

    contest: Optional[Contest] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislation: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ContestPostingDetail(FileColareGeneric):
    class Meta:
        name = "contestPostingDetail"

    contest: Optional[Contest] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    datePublication: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isHomologation: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typePublicationVehicle: Optional[TypePublicationVehicleColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    urlPublicationVehicle: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class OrganizingCommitteeMember(PublicManagement):
    class Meta:
        name = "organizingCommitteeMember"

    contest: Optional[Contest] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cpf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeMember: Optional[TypeMemberEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Person(PublicManagement):
    class Meta:
        name = "person"

    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personPhysical: Optional["PersonPhysical"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personJuridical: Optional["PersonJuridical"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typePerson: Optional[TypePerson] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cpf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    foreignDocument: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cpfFormated: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cnpjFormated: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    email: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personAddress: Optional[PersonAddress] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personAddressCorrespondence: Optional[PersonAddress] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeImportation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    declareInvoice: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nationalSimpleOptingDEISS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    emitNFSEEventual: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    emissionBlocked: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    accountingControl: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    limitNFSEByMonth: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    limitNFSEByYear: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    firstName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personPhone: Optional[PersonPhone] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    formatedInformationPerson: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    formatedInformationPersonAddress: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    formatedInformationPersonPhone: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personsToUnify: List["Person"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selectedOrigin: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selectedTarget: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    restrictedPerson: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personPhones: List[PersonPhone] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    passwordAuthMobile: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    token: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    document: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    documentFormated: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isNaturalPerson: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isJuridicPerson: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isForeignPerson: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    device: Optional[DeviceEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    technicalResponsibleDocument: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    file: Optional[File] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    existCompanyForPerson: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    includeSearchNotTributary: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    municipalRegistrationCompany: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    login: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isIgnoreTaker: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isPublicOrgan: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isTollSquare: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ignorePersonDeiss: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    photo: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueTotal: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentPhotoPDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personFingerPrint: Optional[PersonFingerPrint] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    certifieldObservation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColareRegister: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    forceRetain: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    allowRetention: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalContest(PublicManagement):
    class Meta:
        name = "personalContest"

    contest: Optional[Contest] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalColareReceipt: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rectification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalHomologation(PublicManagement):
    class Meta:
        name = "personalHomologation"

    contest: Optional[Contest] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalColareReceipt: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rectification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Position(PublicManagement):
    class Meta:
        name = "position"

    accumulationPosition: Optional[AccumulationPositionEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    accumulationPositionKey: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    activityArticle: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    activityDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    amountVacancies: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    applyQuinquennial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    articleDescriptionExtinction: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    belongsAnotherFederatedEntity: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cityFederatedEntity: Optional[City] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    contest: Optional[Contest] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    creationLaw: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    creationLawDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    exclusionLaw: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    exclusionLawDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    exclusiveDedication: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    exclusiveDedicationArticle: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    federatedEntityDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    federatedEntityType: Optional[FederatedEntityTypeColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    federatedEntityUnitName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fullPositionName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    groupOffice: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ignoreTCEMA: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isCareerPosition: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isDueTransformation: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isPositionEntityOther: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isPositionExtinction: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    magisterium: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    occupation: Optional[Occupation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    percentageCommission: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislation: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislationActivity: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislationExclusiveDedication: Optional[PersonalLegislation] = (
        field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "",
            },
        )
    )
    personalLegislationExtinction: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislationProvisioning: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalPosition: Optional["PersonalPosition"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    positionSalarySquare: Optional[PositionSalarySquare] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    positionTransformation: Optional["Position"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    positionType: Optional[PositionType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    progressionYear: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    provisioningArticle: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    provisioningDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rectification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    schooling: Optional[Schooling] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sent: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    specialTimeCounting: Optional[SpecialTimeCountingEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    specialTimeCountingKey: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    startDateExtinction: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    stateFederatedEntity: Optional[State] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    subGroupOffice: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSocialSecurity: Optional[TypeSocialSecurityColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueBase: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    workload: Optional[Workload] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class BusinessAccounting(PublicManagement):
    class Meta:
        name = "businessAccounting"

    active: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nameFantasy: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    person: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Company(PublicManagement):
    class Meta:
        name = "company"

    activities: List[Activity] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    activity: Optional[Activity] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    activityBranch: Optional[ActivityBranch] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    activityPrimary: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    activitySecondy: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    addressCompany: Optional["AddressCompany"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    addressImmobileComplete: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    adeptEmitDESIF: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    allowRetention: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    allowTaxOutCity: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    allowedEventualRetentionISS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    area: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    blockedDebit: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    branchActivities: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cancelDirect: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    characteristics: List[CharacteristicsOfEstablishment] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    cnae: Optional[Cnae] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cnaes: List[Cnae] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    collectISSOptionSimple: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    companyDesifAccounts: List["CompanyDesifAccount"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    companyStatusDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    companyTaxTypeDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    companyTaxTypeDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    companyVehicle: Optional[CompanyVehicle] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    concession: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    credentials: Optional["Credentials"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateSearchReceita: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    debitDetailInformationDTOs: List[DebitDetailInformationDto] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    declareREST: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    declareRPS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    desifLiberationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    disregardGuideREST: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dmsLiberationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ecfCredentials: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ecfNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ecfObservations: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    email: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    emailToSendCredentials: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    emitDMS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    emitNFSE: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabledAllowedNFSE: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalActivityDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    formatedInformationAddress: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    formatedInformationAddressProprietary: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    formatedInformationBaseAddress: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    formatedInformationCompany: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    formatedInformationContact: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    formatedInformationPerson: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    generateDebitEstimate: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    graphic: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    healthSurveillanceGroup: Optional[HealthSurveillanceGroup] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ignoreCalculationIRRF: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    incentiveTax: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialActivityDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialInvoiceNumber: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionFinancial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    integrationAgent: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isByPassREST: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isExistPendentReference: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isPermitBlock: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isTollSquare: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    issExemptedAllowed: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    issExemptedPartnerAllowed: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    issImmuneAllowed: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    issSimplifiedStatement: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    itemServices: List[ItemService] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    lastDMSNumber: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lastNumberRpsImportation: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    latitude: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    listActivityBranches: List["CompanyActivityBranch"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    longitude: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    matrix: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    municipalRegistration: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    municipalRegistrationWithMask: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nameFantasy: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    natureJuridical: Optional[NatureJuridical] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    newRegister: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nfseLiberationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    notaryAssignmentType: Optional[NotaryAssignmentType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    notaryOffice: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    operationTime: Optional[OperationTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    organInspection: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    organName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    overallChargesDebit: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    overallDebitUpdate: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    pendentDocument: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    permissionary: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    person: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    phoneCompany: Optional["PhoneCompany"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    protocolProcess: Optional[ProtocolProcess] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerOptional: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    publicArea: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    quantityDebit: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    referenceNotLaunch: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    referenceYear: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    requestAIDF: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    restLiberationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    restrictRetention: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    restrictsDeduction: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    restrictsDiscountInconditional: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selfTaker: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shareCapital: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sizeCompany: Optional[SizeCompany] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    stateRegistration: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    statusCompany: Optional["CompanyStatusCompany"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    substituteTax: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    takerOptional: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    taxType: Optional[TaxType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    teachingUnit: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    tollDeclare: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    totalDebitISS: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    totalReferenceISS: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    unDeclaredReferenceDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueAliquotSpecial: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueAliquotSpecialTaker: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueDebit: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueEstimate: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ContestPositionDetailing(PublicManagement):
    class Meta:
        name = "contestPositionDetailing"

    contest: Optional[Contest] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    contestPositionProofs: List["ContestPositionProof"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    offerVacancieMicroAreasACS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    position: Optional[Position] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    positionAssignments: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    positionRequirement: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    quotasJobs: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    requiresRegistrationCouncilOrder: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeCouncilCode: Optional[TypeCouncilCodeColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    vacanciesBookingRegistration: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    vacanciesPCD: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    vacanciesWideCompetition: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    weeklyWorkload: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonJuridical(PublicManagement):
    class Meta:
        name = "personJuridical"

    dateRecord: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isRuralProducer: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nameFantasy: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    person: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    record: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeRecordCompany: Optional[TypeRecordCompany] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonPhysical(PublicManagement):
    class Meta:
        name = "personPhysical"

    arrivalYear: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    birthCertificateDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    birthCertificateNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    bookBirthCertificate: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    bookMarriageCertificate: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    CNH: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cardSus: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    categoryCNH: Optional[CategoryCnh] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    certifiedCivilianNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    certifiedCivilianTemplate: Optional[CertifiedCivilianTemplateEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cid: Optional[Cid] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    city: Optional[City] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateBirth: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateBirthSpouse: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateDispatcherRG: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deathCertificateBook: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deathCertificateNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deathCertificatePage: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deathCity: Optional[City] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deathCowntry: Optional[Cowntry] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deathDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deathNotaryOffice: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deathState: Optional[State] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    districtTittleElectoral: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    emissionCNHDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    familyBagNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    foreignEntryCondition: Optional[ForeignEntryConditionEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    foreignResidencyTime: Optional[ForeignResidencyTimeEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    instituitionDispatcherRG: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isFirstJob: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    marriageCertificateDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    marriageCertificateNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nameFather: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nameMother: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nationality: Optional[Nationality] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    notarizedBirthCertificate: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    notarizedMarriageCertificate: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    occupation: Optional[Occupation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    pasep: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    permanentCardNumberSUS: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    person: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    portfolioWork: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    portfolioWorkSeries: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    portfolioWorkState: Optional[State] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    profession: Optional[Profession] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    professionalDocument: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    professionalDocumentEmissionDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    professionalDocumentExpirateDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    professionalDocumentState: Optional[State] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    professionalRecord: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    provisionalCardNumberSUS: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    regulatoryBody: Optional[TypeCouncilCodeColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reservist: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rg: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    scholarity: Optional[Schooling] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sessionTittleElectoral: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sex: Optional[SexEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sheetBirthCertificate: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sheetMarriageCertificate: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    socialName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    spouse: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    spouseCPF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    stateCNH: Optional[State] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    stateDispatcherRG: Optional[State] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    stateTittleElectoral: Optional[State] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    tittleElectoral: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeBlood: Optional[TypeBlood] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeDeficiency: Optional[TypeDeficiency] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeMaritalStatus: Optional[TypeMaritalStatus] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeRace: Optional[TypeRace] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    validityCNHDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalPosition(PublicManagement):
    class Meta:
        name = "personalPosition"

    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isRectification: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalColareReceipt: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislationSendingActivitie: Optional[
        PersonalLegislationSending
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislationSendingCreation: Optional[
        PersonalLegislationSending
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislationSendingExclusive: Optional[
        PersonalLegislationSending
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislationSendingExtinction: Optional[
        PersonalLegislationSending
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislationSendingProvisioning: Optional[
        PersonalLegislationSending
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    position: Optional[Position] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rectification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalRegister(PublicManagement):
    class Meta:
        name = "personalRegister"

    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    person: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalColareReceipt: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rectification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PositionClass(PublicManagement):
    class Meta:
        name = "positionClass"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    position: Optional[Position] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    progressionYear: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProviderHumanResources(HumanResourcesBase):
    class Meta:
        name = "providerHumanResources"

    active: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    agency: Optional[Agency] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    capacity: Optional["ProviderHumanResourcesCapacity"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    covid: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dependentsIRRF: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    digitBankAccount: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    groupPayment: Optional[GroupPayment] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isUserPermission: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    issqnExemption: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    numberBankAccount: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    person: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerCredential: Optional["ProviderHumanResourcesCredential"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerHumanResourcesDossier: Optional[
        "ProviderHumanResourcesDossier"
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerHumanResourcesType: Optional[ProviderHumanResourcesType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    registration: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeBankAccount: Optional[TypeBankAccount] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeBondRAIS: Optional[TypeBondRais] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeCategorySEFIP: Optional[TypeCategorySefip] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    workload: Optional[Workload] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TeachingUnit(PublicManagement):
    class Meta:
        name = "teachingUnit"

    acronymConcessionaire: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    acronymEducationalList: List["AcronymEducational"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeEnergy: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    creationLaw: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    creationLawResolution: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initials: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    latitude: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    longitude: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    operatingRegion: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    person: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    schoolIBGECode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AcronymEducational(PublicManagement):
    class Meta:
        name = "acronymEducational"

    acronym: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    teachingUnit: Optional[TeachingUnit] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AddressCompany(PublicManagement):
    class Meta:
        name = "addressCompany"

    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    company: Optional[Company] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    city: Optional[City] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeStreet: Optional[TypeStreet] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    street: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    number: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    block: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lot: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    complement: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    neighborhood: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cep: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    streetObj: Optional[Street] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    formatedInformationAddress: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalizeCompanyPending: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CompanyActivityBranch(PublicManagement):
    class Meta:
        name = "companyActivityBranch"

    activityBranch: Optional[ActivityBranch] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    company: Optional[Company] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CompanyStatusCompany(PublicManagement):
    class Meta:
        name = "companyStatusCompany"

    company: Optional[Company] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateInternalProcess: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    internalProcess: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    prioritized: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    protocolProcess: Optional[ProtocolProcess] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    statusCompany: Optional[StatusCompany] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ContestPositionProof(PublicManagement):
    class Meta:
        name = "contestPositionProof"

    contest: Optional[Contest] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    contestPositionDetailing: Optional[ContestPositionDetailing] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateTest: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    proofCharacters: List["ProofCharacter"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    typeCharacter: Optional[TypeCharacterColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeProof: Optional[TypeProofColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Credentials(PublicManagement):
    class Meta:
        name = "credentials"

    actionType: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    company: Optional[Company] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cryptText: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateSended: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    emailSended: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    password: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    passwordSendToUser: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    privateKey: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    publicKey: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    userName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    userNameSended: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Event(PublicManagement):
    class Meta:
        name = "event"

    applyPension: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    bank: Optional[Bank] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    baseCalculationEvents: List["BaseCalculationEvent"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    byPassTransportInVacation: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    classificationBudget: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    classificationDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    classificationNature: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeAccount: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeClassification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeNatureDiscount: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeNatureEarning: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeSourceRevenueCodificationIntegration: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    company: Optional[Company] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    considerBasicRemuneration: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    considerBasicSalary: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    considerSalaryRange: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    considerWorkloadCalculation: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    consignable: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    decimalNumber: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    detailedProgrammaticBasis: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    discountedGrossTotalPlight: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialTableRubricList: List["EsocialTableRubric"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    eventBlockByPayrollType: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventBlocker: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventCalculationTypePremiumLicense: Optional[EventCalculationType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventCalculationTypeThirteenth: Optional[EventCalculationType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventCalculationTypeVacation: Optional[EventCalculationType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventDiscount: Optional["Event"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventStatus: Optional[EventStatus] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalProgressionPeriod: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fixedBaseToExtraHour: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fixedValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    identifier: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialProgressionPeriod: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    internalClassificationBudget: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isAdjustEvent: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isBlockPremiumLicense: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isBlockbyContractType: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isByPassMultiplyAmount: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isByPassProportionalRPPS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isConsiderInPremiumLicense: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isConsiderInThirteenth: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isConsiderInVacation: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isEventAdmissionType: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isEventBlockByInstitution: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isEventBlockByPayrollType: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isEventBlockByPosition: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isEventTypeRemovalBlockage: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isIgnnoreLevel: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isIncludeTotalValue: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isPostPension: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isProgramaticBasis: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isTruncEventValue: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isTruncTotalValue: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isUseValueInSameReference: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lawEvent: Optional[LawEvent] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    legalAddition: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    limitValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    managementUnit: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    maxQuantity: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    natureEvent: Optional[NatureEventEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    natureHeading: Optional["NatureHeading"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    notProportional: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    orderCalculation: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    patronalPercentage: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    percentage: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    percentageConsignable: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalEvent: Optional["PersonalEvent"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislation: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    positionType: Optional[PositionType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    priorityDisplay: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    programmaticBasis: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    receiptConcession: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    retentionCodeIntegration: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    retentionPerson: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sourceRevenueCodification: Optional[SourceRevenueCodification] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    tableRubric: Optional["TableRubric"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    termination: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    thirtheenDestinationEvent: Optional["Event"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    timeConversionFactor: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    transitory: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeAccountingEvent: Optional[TypeAccountingEvent] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeBondEvent: Optional[TypeBondEvent] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeCalculationEvent: Optional[TypeCalculationEvent] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeEventTermination: Optional[TypeEventTermination] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    unionTypeEnum: Optional[UnionTypeEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    workload: Optional[Workload] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PhoneCompany(PublicManagement):
    class Meta:
        name = "phoneCompany"

    company: Optional[Company] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    DDD: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    number: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    principal: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typePhone: Optional[TypePhone] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PositionLevel(PublicManagement):
    class Meta:
        name = "positionLevel"

    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    paymentUnitCode: Optional[PaymentUnitCodeEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    positionClass: Optional[PositionClass] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    progressionYear: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    select: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProviderHumanResourcesCapacity(PublicManagement):
    class Meta:
        name = "providerHumanResourcesCapacity"

    capacityType: Optional[CapacityType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    contractHumanResoursesTypeDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    department: Optional[Department] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    departmentWork: Optional[Department] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerHumanResources: Optional[ProviderHumanResources] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProviderHumanResourcesContract(PublicManagement):
    class Meta:
        name = "providerHumanResourcesContract"

    admissionTypeESocial: Optional[AdmissionTypeEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    apolysisInsuranceNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    areaActivity: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    code: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    content: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    contractHumanResourcesType: Optional[ContractHumanResourcesType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    contractNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    effortNumber: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileType: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionTraineeCep: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionTraineeCity: Optional[City] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionTraineeCnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionTraineeCorporateName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionTraineeNeighborhood: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionTraineeStreetName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionTraineeStreetNameNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    integrationAgentCnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    protocolProcess: Optional[ProtocolProcess] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerHumanResources: Optional[ProviderHumanResources] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shortDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    traineeLevel: Optional[TraineeLevelEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    traineeNature: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    traineeSupervisorCpf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    value: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueContract: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProviderHumanResourcesCredential(PublicManagement):
    class Meta:
        name = "providerHumanResourcesCredential"

    authenticDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    authenticUser: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    confirmationPassword: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cpf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    email: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ipAddress: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isReleased: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lastLogin: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    password: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    phone: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    plainPassword: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerHumanResources: Optional[ProviderHumanResources] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    releaseDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    releaseUser: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProviderHumanResourcesDossier(PublicManagement):
    class Meta:
        name = "providerHumanResourcesDossier"

    block: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cashier: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    container: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dossier: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dossierCreationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    drawer: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    information: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    locale: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lot: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerHumanResources: Optional[ProviderHumanResources] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shelf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    street: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProviderHumanResourcesFunctionService(PublicManagement):
    class Meta:
        name = "providerHumanResourcesFunctionService"

    finalTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    functionService: Optional[FunctionService] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerHumanResources: Optional[ProviderHumanResources] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class UserNfse(PublicManagement):
    class Meta:
        name = "userNFSE"

    alternativeLogin: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    businessAccounter: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    businessAccounting: Optional[BusinessAccounting] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    companyCredential: Optional["Company"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    companyName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    condominiumManager: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    confirmPassword: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cpf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateBirth: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    email: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enableDigitalCertificateLogin: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    firstName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fromIntegration: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    municipalRegistration: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    password: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personCredential: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personEventualCredential: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    phoneNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    plainPassword: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sex: Optional[SexEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    showCART: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    showDEISS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    showDESIF: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    showDMS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    showEmitNFSE: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    showNFSE: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    showNFSEEventual: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    showREST: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    showSimplifiedStatement: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    urlAuthentication: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    userNFSEStatus: Optional[UserNfsestatus] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class UserTeachingUnit(PublicManagement):
    class Meta:
        name = "userTeachingUnit"

    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    teachingUnit: Optional[TeachingUnit] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    user: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class BaseCalculationEvent(PublicManagement):
    class Meta:
        name = "baseCalculationEvent"

    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    event: Optional[Event] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventBasis: Optional[Event] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class DesifAccountAnalyzeFile(PublicManagement):
    class Meta:
        name = "desifAccountAnalyzeFile"

    creationUserNFSE: Optional[UserNfse] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    file: Optional[File] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class DigitalCertificatePerson(PublicManagement):
    class Meta:
        name = "digitalCertificatePerson"
        namespace = "http://ws.integration.pm.bsit.com.br/"

    alias: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    alterCreateCertificate: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    buildingUser: Optional[BuildingUser] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    CNPJ: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    CPF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    certificateFile: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    certificateName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    certificatePerson: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    certificateType: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    certificateUser: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    certificateUserNFSE: Optional[UserNfse] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cpfCnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isEsocial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isSisObras: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    keyStore: Optional[KeyStore] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    password: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    pathDll: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    representation: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    summary: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Employee(HumanResourcesBase):
    class Meta:
        name = "employee"

    accountOperation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    adjustmentType: Optional[AdjustmentType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    admissionCategoryESocialCeded: Optional[AdmissionTypeEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    admissionCategoryESocialElectiveTerm: Optional[
        AdmissionTypeEsocialEnum
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    admissionCategoryESocialUnionLeader: Optional[AdmissionTypeEsocialEnum] = (
        field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "",
            },
        )
    )
    admissionDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    admissionDateCeded: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    admissionDateFinal: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    admissionDateUnionLeader: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    admissionProcessNumber: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    admissionRegister: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    admissionTypes: List[int] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    agency: Optional[Agency] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    apolysisInsuranceNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    areaActivity: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    articleLDO: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    authorizingLaw: Optional[AuthorizingLaw] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    banks: List[int] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    benefitType: Optional[BenefitType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    classificationContest: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    compatibilityTime: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    contentAccumulation: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    contentNepotism: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    contest: Optional[Contest] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    contractNumber: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    covid: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    decriptionLDO: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    department: Optional[Department] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    departmentOrigin: Optional[Department] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    departmentWorks: List[int] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    dependentHealthPlan: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dependentsIRRF: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dependentsSalaryFamily: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    descriptionTypePositionAccumulation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    device: Optional[DeviceEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    digitBankAccount: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeeAdmissionTemporaries: List["EmployeeAdmissionTemporary"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    employeeCapacity: Optional["EmployeeCapacity"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeeCredential: Optional["EmployeeCredential"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeeDossier: Optional["EmployeeDossier"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeeFunction: Optional["EmployeeFunction"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeeInactive: Optional["EmployeeInactive"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeeOccurrenceFunctional: Optional["EmployeeOccurrenceFunctional"] = (
        field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "",
            },
        )
    )
    employeeOrigin: Optional["Employee"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeePensioner: Optional["EmployeePensioner"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    endowmentCommitmentSheet: Optional[EndowmentCommitmentSheet] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    entityElectiveTermCnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    entityUnionLeaderCnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    exonerated: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    exonerationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    externalPositions: List[ExternalPosition] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    fileNameAccumulation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileNameNepotism: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileTypeAccumulation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileTypeNepotism: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalTermTermAdditive: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    freezeProgressionDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    generatedSending: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    grantorAgencyCnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    grantorAgencyName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    groupPayment: Optional[GroupPayment] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    holidayAmountDue: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    holidayAmountRegistered: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentAccumulationPDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentNepotismPDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    inactiveDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTermTermAdditive: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionTraineeCep: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionTraineeCity: Optional[City] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionTraineeCnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionTraineeCorporateName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionTraineeNeighborhood: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionTraineeStreetName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionTraineeStreetNameNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    integrationAgentCnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isCheckSiopeA: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isCheckSiopeB: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isCheckSiopeC: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isCheckSiopeD: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isCheckSiopeE: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isCheckSiopeF: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isCheckSiopeG: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isCheckSiopeH: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isCheckSiopeI: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isGeneratedSending: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isNepotism: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isTermAdditive: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isUserPermission: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isWorkingAfterDateToRetired: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    massSegregationType: Optional[MassSegregationTypeEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nepotism: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    numberBankAccount: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observationPaycheck: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    originalExerciseDateElectiveTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    passwordAuthMobile: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    person: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalAdmission: Optional["PersonalAdmission"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislationLDO: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalPensioner: Optional["PersonalPensioner"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalRegister: Optional[PersonalRegister] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalRetirement: Optional["PersonalRetirement"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    photo: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    position: Optional[Position] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    positionLevelOrigin: Optional[PositionLevel] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    positionOrigin: Optional[Position] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    positionOriginDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    positionOriginOtherEntity: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    positionOriginValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    quinquennialDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    quinquennialPositionOrigin: Optional[QuinquennialPositionOriginEnum] = (
        field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "",
            },
        )
    )
    reference: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    registration: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    registrationCeded: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    registrationElectiveTerm: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    registrationFunctional: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    registrationUnionLeader: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    remunerationEffectivePosition: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    segmentSiope: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    showRegistrationFunctional: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    termAdditiveNumber: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    timeProportional: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    timeTotal: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    tokenMobile: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    totalDependents: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    traineeLevel: Optional[TraineeLevelEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    traineeNature: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    traineeSupervisorCpf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeBankAccount: Optional[TypeBankAccount] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeBeneficiaryEmployee: Optional[TypeBeneficiaryEmployee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeBondRAIS: Optional[TypeBondRais] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeCategorySEFIP: Optional[TypeCategorySefip] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typePensionRegimeESocialCeded: Optional[TypePensionRegimeEsocialEnum] = (
        field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "",
            },
        )
    )
    typePensionRegimeESocialElectiveTerm: Optional[
        TypePensionRegimeEsocialEnum
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typePensionRegimeESocialUnionLeader: Optional[
        TypePensionRegimeEsocialEnum
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typePositionAccumulation: Optional[TypePositionAccumulation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSituationEmployee: Optional[TypeSituationEmployee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeWorkRegimeESocialCeded: Optional[TypeWorkRegimeEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeWorkRegimeESocialElectiveTerm: Optional[TypeWorkRegimeEsocialEnum] = (
        field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "",
            },
        )
    )
    typeWorkRegimeESocialUnionLeader: Optional[TypeWorkRegimeEsocialEnum] = (
        field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "",
            },
        )
    )
    union: Optional[UnionType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    userPermission: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valuePositionOriginOtherEntity: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    workload: Optional[Workload] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    yearAdmissionProcess: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EventSubElement(PublicManagement):
    class Meta:
        name = "eventSubElement"

    codeElementIntegration: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeSubElementIntegration: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    element: Optional[Element] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    event: Optional[Event] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    subElement: Optional[SubElement] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class NatureHeading(PublicManagement):
    class Meta:
        name = "natureHeading"

    codeNature: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    event: Optional[Event] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProofCharacter(PublicManagement):
    class Meta:
        name = "proofCharacter"

    contestPositionProof: Optional[ContestPositionProof] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    noticeItemNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeProofCharacter: Optional[TypeProofCharacterColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeRemoval(PublicManagement):
    class Meta:
        name = "typeRemoval"

    codeCourt: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeRAIS: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dispositionType: Optional[DispositionTypeEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventUnifier: Optional[Event] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    extendedDays: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isDiscardByRemoval: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isEsocialRemoval: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isExtendByRemoval: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isINSS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isRPPS: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isUnifyESocial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    paidDays: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    remunerated: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    showCid: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    timeAccountingService: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeLicense: Optional[TypeLicenseEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeRemovalESocial: Optional[TypeRemovalEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeRemovalSEFIPExit: Optional[TypeRemovalSefip] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeRemovalSEFIPReturn: Optional[TypeRemovalSefip] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class DesifAccountAnalyze(PublicManagement):
    class Meta:
        name = "desifAccountAnalyze"

    account: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    aliquot: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    analyzeDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    analyzeUser: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    approved: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    attributes: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    column: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    creationUserNfse: Optional[UserNfse] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    desifAccountAnalyzeFile: Optional[DesifAccountAnalyzeFile] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    desifGroup: Optional[DesifGroup] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalPeriod: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    homologate: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    intialPeriod: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isHomologate: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isTaxed: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    itemService: Optional[ItemService] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nature: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rejected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    taxed: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EmployeeAdmissionTemporary(HumanResourcesBase):
    class Meta:
        name = "employeeAdmissionTemporary"

    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislation: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EmployeeCapacity(FileColareGeneric):
    class Meta:
        name = "employeeCapacity"

    actionDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    actionNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    actionType: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    admissionTypeDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    capacityType: Optional[CapacityType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateEntry: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    department: Optional[Department] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    departmentWork: Optional[Department] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    generatedSend: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    numberCapacity: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalCapacity: Optional["PersonalCapacity"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    workload: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EmployeeCredential(PublicManagement):
    class Meta:
        name = "employeeCredential"

    authenticDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    authenticUser: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    confirmationPassword: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cpf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    email: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ipAddress: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isReleased: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lastLogin: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nameDepartament: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    password: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    phone: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    photoAuthentic: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    plainPassword: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    releaseDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    releaseUser: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EmployeeDossier(PublicManagement):
    class Meta:
        name = "employeeDossier"

    block: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cashier: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    container: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dossier: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dossierCreationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    drawer: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    information: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    locale: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    lot: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    shelf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    street: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EmployeeExoneration(PublicManagement):
    class Meta:
        name = "employeeExoneration"

    amnestyLawNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    content: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    dateDecree: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateExoneration: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    decreeExoneration: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    decreeNumberExoneration: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeeReverse: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileType: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentPDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isWithoutPayrollMovement: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    judicialProcess: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reverseTerminationESocial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    successorOrganCnpj: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeExoneration: Optional[TypeExoneration] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeReverseShutdown: Optional[TypeReverseShutdownEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EmployeeFunction(PublicManagement):
    class Meta:
        name = "employeeFunction"

    activityCarriedOut: Optional[ActivityCarriedOut] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    decreeAppointment: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    decreeDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    event: Optional[Event] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    gratification: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    numberProcess: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    position: Optional[Position] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    positionLevel: Optional[PositionLevel] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    possessionDocumentFunctions: List["PossessionDocumentFunction"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    value: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EmployeeInactive(PublicManagement):
    class Meta:
        name = "employeeInactive"

    administrativeActNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    benefitSituationESocial: Optional[BenefitSituationEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateAdministrativeAct: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateInactivity: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    datePosted: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    instrumentDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    judicialDecision: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    origenDeasedDecree: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    parity: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    position: Optional[Position] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeAdministrativeAct: Optional[TypeAdministrativeActColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeBaseCourtESocial: Optional[TypeBaseCourtEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeBaseCourtOfLaw: Optional[TypeBaseCourtOfLaw] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EmployeeOccurrenceFunctional(PublicManagement):
    class Meta:
        name = "employeeOccurrenceFunctional"

    dateApplicability: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    dateValidate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    legalBasis: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    officialDiaryDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeOccurrenceFunctional: Optional[TypeOccurrenceFunctional] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EmployeePensioner(PublicManagement):
    class Meta:
        name = "employeePensioner"

    accordNumberTCM: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    actNumberGrantedPension: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    adjustmentShape: Optional[AdjustmentShapeColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    administrativeActNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    benefitSituationESocial: Optional[BenefitSituationEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    content: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    contentJudicialDecision: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    contentPensionMerce: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    contentPublicationCertificate: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    dateAdministrativeAct: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    datePosted: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deathDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deceasedCPF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deceasedDateBirth: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deceasedDecree: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deceasedName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deceasedPosition: Optional[Position] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    deceasedRegister: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    diedInActivity: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    endDateBenefit: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileNameJudicialDecision: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileNamePensionMerce: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileNamePublicationCertificate: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileType: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileTypeJudicialDecision: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileTypePensionMerce: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileTypePublicationCertificate: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    grantProcessNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentJudicialDecisionPDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentPDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentPensionMercePDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentPublicationCertificatePDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    instrumentDescription: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    judicialDecision: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    legalResponsible: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    parity: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    pensionType: Optional[PensionTypeColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    pensionValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislation: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    share: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    startDateBenefit: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    tcmProtocolProcessYear: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeAdministrativeAct: Optional[TypeAdministrativeActColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeBaseCourtESocial: Optional[TypeBaseCourtEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeBaseCourtOfLaw: Optional[TypeBaseCourtOfLaw] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeBenefitESocial: Optional[TypeBenefitEsocialEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeDocumentGrant: Optional[TypeDocumentGrantColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeJudicialRequestDetailing: Optional[
        TypeJudicialRequestDetailingColareEnum
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeRelationship: Optional[TypeRelationship] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EmployeeRemoval(HumanResourcesBase):
    class Meta:
        name = "employeeRemoval"

    actionDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    actionNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    actionType: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    allowedLaunchHolidays: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    ammountDays: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    automatic: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cid: Optional[Cid] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    content: Optional[bytes] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "format": "base64",
        },
    )
    destinyDispositionCity: Optional[City] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    federatedEntityType: Optional[FederatedEntityTypeColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fileType: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalEnjoymentFormated: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalVestingPeriod: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalVestingPeriodFormated: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idDocumentPDF: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialEnjoymentFormated: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTermToOrgan: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialVestingPeriod: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialVestingPeriodFormated: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    managementUnitCNPJ: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    managementUnitId: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    managementUnitName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    pensionGuideINSSReference: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalDisposition: Optional["PersonalDisposition"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLicense: Optional["PersonalLicense"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    referenceToCalculation: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sameReason: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeEntity: Optional[TypeEntityEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeRemoval: Optional[TypeRemoval] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeTrafficAccident: Optional[TypeTrafficAccidentEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Esocial(PublicManagement):
    class Meta:
        name = "esocial"

    actived: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    applicationEmission: Optional[ApplicationEmissionEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    codeTableRubric: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    digitalCertificatePerson: Optional[DigitalCertificatePerson] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventDaily: Optional["Event"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventInss: Optional["Event"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventIrrf: Optional["Event"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventIssqn: Optional["Event"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventJeton: Optional["Event"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventRemuneration: Optional["Event"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    inscriptionType: Optional[InscriptionTypeEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institutionName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sendAdministrativeProcess: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendAdmissionWorker: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendBeneficiaryRegistration: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendBeneficiaryRegistrationChange: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendBenefitRegistration: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendBenefitRegistrationFinish: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendCapacityTax: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendChangeRegistrationData: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendChangeWorkContract: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendClosingPeriodicEvents: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendDisposition: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendEmployer: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendEnvironmentalWorkingCondition: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendEstablishments: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendEventDeletion: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendFunctionPositionCommission: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendPaymentWork: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendPosition: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendPreliminaryRegistrationEmployee: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendPublicCareer: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendRemunerationBenefit: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendReopeningPeriodicEvents: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendReverseShutdown: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendRubric: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendSchedulesWorkShifts: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendShutdownEmployee: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendTemporaryRemoval: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendUntiedWorkerFinish: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendUntiedWorkerHome: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendUntiedWorkerHomeNolinkAlteration: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendWorkAccidentCommunication: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendWorkEnvironment: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendWorkerHealthMonitoring: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendWorkerRemunerationGeneralRegime: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendWorkerRemunerationOwnRegime: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    typeEnvironment: Optional[TypeEnvironmentEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    versionIssuanceProcess: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalAdmission(PublicManagement):
    class Meta:
        name = "personalAdmission"

    courtOrderDocuments: List["CourtOrderDocument"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalColareReceipt: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    possessionDocuments: List["PossessionDocument"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    rectification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalEvent(PublicManagement):
    class Meta:
        name = "personalEvent"

    event: Optional[Event] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventSubElements: List[EventSubElement] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    maximumPercentual: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    minimumPercentual: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalColareReceipt: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rectification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalPensioner(PublicManagement):
    class Meta:
        name = "personalPensioner"

    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalColareReceipt: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rectification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalRetirement(PublicManagement):
    class Meta:
        name = "personalRetirement"

    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalColareReceipt: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rectification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TableRubric(PublicManagement):
    class Meta:
        name = "tableRubric"

    active: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    natureRubric: Optional[NatureHeading] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    remunerationCeiling: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    taxIncidenceRubricCPRP: Optional[TaxIncidenceRubric] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    taxIncidenceRubricFGTS: Optional[TaxIncidenceRubric] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    taxIncidenceRubricIRRF: Optional[TaxIncidenceRubric] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    taxIncidenceRubricPrev: Optional[TaxIncidenceRubric] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    taxIncidenceRubricSIND: Optional[TaxIncidenceRubric] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeRubric: Optional[TypeRubricEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class DesifAccount(PublicManagement):
    class Meta:
        name = "desifAccount"

    account: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    aliquot: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    attributes: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    column: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    desifAccountAnalyze: Optional[DesifAccountAnalyze] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    desifGroup: Optional[DesifGroup] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalPeriod: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    homologate: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    intialPeriod: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isHomologate: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isTaxed: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    itemService: Optional[ItemService] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    nature: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    taxed: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EmployeePosition(FileColareGeneric):
    class Meta:
        name = "employeePosition"

    activityCarriedOut: Optional[ActivityCarriedOut] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    admissionType: Optional[AdmissionType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    appointmentDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    courtOrderDocuments: List[CourtOrderDocument] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    decreeAppointment: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    decreeDateAppointment: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    effectiveDateExercise: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isCourtOrderDocument: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    isGeneratedSending: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalAdmission: Optional[PersonalAdmission] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalLegislation: Optional[PersonalLegislation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalPositionUpdate: Optional["PersonalPositionUpdate"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    position: Optional[Position] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    positionLevel: Optional[PositionLevel] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    possessionDocuments: List["PossessionDocument"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    publicationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    subGroupOffice: Optional[SubGroupOffice] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeModalityChange: Optional[TypeModalityChangeEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EsocialSending(PublicManagement):
    class Meta:
        name = "esocialSending"

    containsOccurrences: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    esocial: Optional[Esocial] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialAdmissionWorkerList: List["EsocialAdmissionWorker"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    esocialAdmissionWorkerProviderList: List["EsocialAdmissionWorker"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    esocialBenefitRegistrationList: List["EsocialBenefitRegistration"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    esocialEventDeletionList: List["EsocialEventDeletion"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    esocialReturn: Optional["EsocialReturn"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialShutdownList: List["EsocialShutdown"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    esocialShutdownProviderList: List["EsocialShutdown"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    esocialXML: Optional[EsocialXml] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    eventIds: List[int] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    findAllLotEvent: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    numberStartNextRows: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    receptionDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reference: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sendNextRows: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendRemunerationAccounting: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sendRemunerationProvider: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    status: Optional[TypeEsocialSendingStatusEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    submissionProtocol: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    thirteen: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    typeEsocialSending: Optional[TypeEsocialSendingEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    versionReceivingApplication: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EsocialTableRubric(PublicManagement):
    class Meta:
        name = "esocialTableRubric"

    esocial: Optional[Esocial] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialSending: Optional["EsocialSending"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    event: Optional[Event] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    recordDeletedEsocial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    typeSending: Optional[TypeSendingEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalCapacity(PublicManagement):
    class Meta:
        name = "personalCapacity"

    employeeCapacity: Optional[EmployeeCapacity] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isRectification: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalColareReceipt: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rectification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalDisposition(PublicManagement):
    class Meta:
        name = "personalDisposition"

    employeeRemoval: Optional[EmployeeRemoval] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isRectification: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalColareReceipt: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rectification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalLicense(PublicManagement):
    class Meta:
        name = "personalLicense"

    employeeRemoval: Optional[EmployeeRemoval] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isRectification: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalColareReceipt: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rectification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PossessionDocumentFunction(FileColareGeneric):
    class Meta:
        name = "possessionDocumentFunction"

    actDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    documentTypePossession: Optional[DocumentTypePossessionEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeeFunction: Optional[EmployeeFunction] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    inputDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    number: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    observation: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeAct: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CompanyDesifAccount(PublicManagement):
    class Meta:
        name = "companyDesifAccount"

    company: Optional[Company] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    desifAccount: Optional[DesifAccount] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EsocialAdmissionWorker(PublicManagement):
    class Meta:
        name = "esocialAdmissionWorker"

    actived: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocial: Optional[Esocial] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialSending: Optional[EsocialSending] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    person: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerHumanResourcesContract: Optional[
        ProviderHumanResourcesContract
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    recordDeletedEsocial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeAdmissionWorker: Optional[TypeAdmissionWorkerEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSending: Optional[TypeSendingEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EsocialBenefitRegistration(PublicManagement):
    class Meta:
        name = "esocialBenefitRegistration"

    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocial: Optional[Esocial] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialSending: Optional[EsocialSending] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialSendingAdmission: Optional[EsocialSending] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    recordDeletedEsocial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSending: Optional[TypeSendingEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EsocialDisposition(PublicManagement):
    class Meta:
        name = "esocialDisposition"

    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeeRemoval: Optional[EmployeeRemoval] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocial: Optional[Esocial] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialSending: Optional[EsocialSending] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialSendingAdmission: Optional[EsocialSending] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    recordDeletedEsocial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeRegisterDisposition: Optional[TypeRegisterDispositionEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSending: Optional[TypeSendingEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EsocialPaymentWork(PublicManagement):
    class Meta:
        name = "esocialPaymentWork"

    esocial: Optional[Esocial] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialSending: Optional[EsocialSending] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    payrollMovementList: List["PayrollMovement"] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    person: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerPayrollMovementList: List[
        "ProviderHumanResourcesPayrollMovement"
    ] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    recordDeletedEsocial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reference: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    remunerationWorkerAccountingList: List["RemunerationWorkerAccounting"] = (
        field(
            default_factory=list,
            metadata={
                "type": "Element",
                "namespace": "",
                "nillable": True,
            },
        )
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSending: Optional[TypeSendingEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EsocialReturn(PublicManagement):
    class Meta:
        name = "esocialReturn"

    description: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    duplicate: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    esocialSending: Optional[EsocialSending] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    estimateCompletion: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    receiptNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    returnEvent: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    status: Optional[TypeEsocialProcessingStatusEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    versionReturnApplication: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EsocialShutdown(PublicManagement):
    class Meta:
        name = "esocialShutdown"

    employeeExoneration: Optional[EmployeeExoneration] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocial: Optional[Esocial] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialSending: Optional[EsocialSending] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialSendingAdmission: Optional[EsocialSending] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialSendingBeneficiary: Optional[EsocialSending] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerHumanResourcesContract: Optional[
        ProviderHumanResourcesContract
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeAdmissionWorker: Optional[TypeAdmissionWorkerEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSending: Optional[TypeSendingEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EsocialTableEstablishments(PublicManagement):
    class Meta:
        name = "esocialTableEstablishments"

    active: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    esocial: Optional[Esocial] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialSending: Optional[EsocialSending] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialTerm: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    learnerContract: Optional[LearnerContractEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    learnerContractThird: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    numberProcessLearnerContract: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    pointRecord: Optional[PointRecordEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    sendFapEstablishment: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    typeSending: Optional[TypeSendingEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Manager(PublicManagement):
    class Meta:
        name = "manager"

    advisoryCompany: Optional[AdvisoryCompany] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    birthDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    city: Optional[City] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cpf: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    designationAct: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    designationActDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    email: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeeCapacity: Optional[EmployeeCapacity] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeePosition: Optional[EmployeePosition] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    enabled: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    fatherName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    finalVigencyDesignationAct: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    initialVigencyDesignationAct: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    managerFunction: Optional[ManagerFunction] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    motherName: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    neighborhood: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    person: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    phoneNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    postNature: Optional[PostNature] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    postalCode: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    professionalDocument: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    professionalDocumentState: Optional[State] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    provision: Optional[Provision] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    schooling: Optional[Schooling] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    street: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeActDesignation: Optional[TypeActDesignation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PersonalPositionUpdate(PublicManagement):
    class Meta:
        name = "personalPositionUpdate"

    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeePosition: Optional[EmployeePosition] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    idColare: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalColareReceipt: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rectification: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSendingColare: Optional[TypeSendingColareEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PossessionDocument(FileColareGeneric):
    class Meta:
        name = "possessionDocument"

    documentTypePossession: Optional[DocumentTypePossessionEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeePosition: Optional[EmployeePosition] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PayrollMovement(PublicManagement):
    class Meta:
        name = "payrollMovement"

    account: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    accountDigit: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    agency: Optional[Agency] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    amountDiscount: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    amountEarning: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    amountNet: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    baseINSSOtherMovements: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    baseIRRFOtherMovements: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    baseRPPSOtherMovements: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    beforeAmountDiscount: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    beforeAmountEarning: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    beforeLiquid: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    calculateDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    calculateUser: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    calculationMethodLastSalary: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    cardConsignableValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    consignableValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    daysEsocial: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employee: Optional[Employee] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeeCapacity: Optional[EmployeeCapacity] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    employeePosition: Optional[EmployeePosition] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    errorCalculationMessage: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialPaymentWork: Optional[EsocialPaymentWork] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialRemunerationWorker: Optional["EsocialRemunerationWorker"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    execution: Optional[PayrollMovementCalculationExecution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    familySalaryValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    grantedDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    groupPayment: Optional[GroupPayment] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    harmfulAgentExposureDegree: Optional[HarmfulAgentExposureDegreeEnum] = (
        field(
            default=None,
            metadata={
                "type": "Element",
                "namespace": "",
            },
        )
    )
    healthRemovalDays: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    healthValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    indexCalculate: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    inssBaseThirteenthValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    inssBaseValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    inssPercent: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    inssThirteenthPercent: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    inssThirteenthValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    inssValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isByPassLog: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isManualValues: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    isRegisterLog: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    liquid: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    maternityRemovalDays: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    maternityValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    note: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    payday: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    payrollMovementSource: Optional["PayrollMovement"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    payrollType: Optional[PayrollType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    personalColareReceipt: Optional[PersonalColareReceipt] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reference: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rppsBaseThirteenthValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rppsBaseValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rppsPercent: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rppsThirteenthPercent: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rppsThirteenthValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rppsValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    statusPayrollMovement: Optional[StatusPayrollMovement] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    terminationBasis: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    thirteenthPercent: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    totalConsignableValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    totalDependentIRRF: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    totalRemovalDays: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueINSSOtherMovements: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueIRRFOtherMovements: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueRPPSOtherMovements: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueTotalEarning: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    valueTotalThirtennthEarning: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EsocialRemunerationWorker(PublicManagement):
    class Meta:
        name = "esocialRemunerationWorker"

    esocial: Optional[Esocial] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialSending: Optional[EsocialSending] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    payrollMovementList: List[PayrollMovement] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    person: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerPayrollMovementList: List[
        "ProviderHumanResourcesPayrollMovement"
    ] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "",
            "nillable": True,
        },
    )
    recordDeletedEsocial: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reference: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    remunerationWorkerAccountingList: List["RemunerationWorkerAccounting"] = (
        field(
            default_factory=list,
            metadata={
                "type": "Element",
                "namespace": "",
                "nillable": True,
            },
        )
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    thirteen: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeRemunerationWorker: Optional[TypeRemunerationWorkerEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSending: Optional[TypeSendingEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EsocialEventDeletion(PublicManagement):
    class Meta:
        name = "esocialEventDeletion"

    esocial: Optional[Esocial] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialAdmissionWorker: Optional[EsocialAdmissionWorker] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialBenefitRegistration: Optional[EsocialBenefitRegistration] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialDisposition: Optional[EsocialDisposition] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialPaymentWork: Optional[EsocialPaymentWork] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialRemunerationWorker: Optional[EsocialRemunerationWorker] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialSending: Optional[EsocialSending] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialSendingToDeletion: Optional[EsocialSending] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialTableRubric: Optional[EsocialTableRubric] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeSending: Optional[TypeSendingEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProviderHumanResourcesPayrollMovement(PublicManagement):
    class Meta:
        name = "providerHumanResourcesPayrollMovement"

    account: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    accountDigit: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    agency: Optional[Agency] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    amountDiscount: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    amountEarning: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    amountNet: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    beforeAmountDiscount: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    beforeAmountEarning: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    beforeLiquid: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    calculateDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    calculateUser: Optional[User] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialPaymentWork: Optional[EsocialPaymentWork] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialRemunerationWorker: Optional[EsocialRemunerationWorker] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    grantedDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    groupPayment: Optional[GroupPayment] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    inssBaseValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    inssPercent: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    inssValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    liquid: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    note: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    payday: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    payrollType: Optional[ProviderHumanResourcesPayrollType] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerHumanResources: Optional[ProviderHumanResources] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerHumanResourcesCapacity: Optional[
        ProviderHumanResourcesCapacity
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerHumanResourcesContract: Optional[
        ProviderHumanResourcesContract
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    providerHumanResourcesFunctionService: Optional[
        ProviderHumanResourcesFunctionService
    ] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    reference: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rppsBaseValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rppsPercent: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    rppsValue: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    statusPayrollMovement: Optional[StatusPayrollMovement] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class RemunerationWorkerAccounting(PublicManagement):
    class Meta:
        name = "remunerationWorkerAccounting"

    daily: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialPaymentWork: Optional[EsocialPaymentWork] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    esocialRemunerationWorker: Optional[EsocialRemunerationWorker] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    inss: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    institution: Optional[Institution] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    irrf: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    issqn: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    jeton: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    liquidationDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    occupation: Optional[Occupation] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    paymentDate: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    person: Optional[Person] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    plightNumber: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    remuneration: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    selected: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
    typeFileWorkerAccounting: Optional[TypeFileWorkerAccountingEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "",
        },
    )
